{"version":3,"sources":["webpack://ReduxOrm/webpack/universalModuleDefinition","webpack://ReduxOrm/webpack/bootstrap","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/createClass.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/inheritsLoose.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/typeof.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://ReduxOrm/./node_modules/reselect/lib/index.js","webpack://ReduxOrm/./node_modules/re-reselect/dist/index.js","webpack://ReduxOrm/./node_modules/lodash/_baseOrderBy.js","webpack://ReduxOrm/./node_modules/lodash/_baseIteratee.js","webpack://ReduxOrm/./node_modules/lodash/identity.js","webpack://ReduxOrm/./node_modules/lodash/isArray.js","webpack://ReduxOrm/./node_modules/lodash/filter.js","webpack://ReduxOrm/./node_modules/lodash/orderBy.js","webpack://ReduxOrm/./node_modules/lodash/reject.js","webpack://ReduxOrm/./node_modules/lodash/sortBy.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://ReduxOrm/./node_modules/lodash/_arrayMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseSortBy.js","webpack://ReduxOrm/./node_modules/lodash/_baseUnary.js","webpack://ReduxOrm/./node_modules/lodash/_compareMultiple.js","webpack://ReduxOrm/./node_modules/lodash/_compareAscending.js","webpack://ReduxOrm/./node_modules/lodash/isSymbol.js","webpack://ReduxOrm/./node_modules/lodash/_arrayFilter.js","webpack://ReduxOrm/./node_modules/lodash/_baseFilter.js","webpack://ReduxOrm/./node_modules/lodash/negate.js","webpack://ReduxOrm/./node_modules/lodash/_baseFlatten.js","webpack://ReduxOrm/./node_modules/lodash/_baseRest.js","webpack://ReduxOrm/./node_modules/lodash/_overRest.js","webpack://ReduxOrm/./node_modules/lodash/_apply.js","webpack://ReduxOrm/./node_modules/lodash/_setToString.js","webpack://ReduxOrm/./node_modules/lodash/_isIterateeCall.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry1.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_arity.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry2.js","webpack://ReduxOrm/./node_modules/ramda/es/curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/curry.js","webpack://ReduxOrm/./node_modules/ramda/es/__.js","webpack://ReduxOrm/./node_modules/immutable-ops/es/index.js","webpack://ReduxOrm/./src/constants.js","webpack://ReduxOrm/./src/utils.js","webpack://ReduxOrm/./src/QuerySet.js","webpack://ReduxOrm/./src/Session.js","webpack://ReduxOrm/./src/fields/DefaultFieldInstaller.js","webpack://ReduxOrm/./src/fields/FieldInstallerTemplate.js","webpack://ReduxOrm/./src/fields/Field.js","webpack://ReduxOrm/./src/descriptors.js","webpack://ReduxOrm/./src/fields/Attribute.js","webpack://ReduxOrm/./src/fields/RelationalField.js","webpack://ReduxOrm/./src/fields/ForeignKey.js","webpack://ReduxOrm/./src/fields/ManyToMany.js","webpack://ReduxOrm/./src/fields/OneToOne.js","webpack://ReduxOrm/./src/fields/index.js","webpack://ReduxOrm/./src/Model.js","webpack://ReduxOrm/./src/db/Table.js","webpack://ReduxOrm/./src/db/Database.js","webpack://ReduxOrm/./src/selectors/SelectorSpec.js","webpack://ReduxOrm/./src/selectors/ModelBasedSelectorSpec.js","webpack://ReduxOrm/./src/selectors/idArgSelector.js","webpack://ReduxOrm/./src/selectors/MapSelectorSpec.js","webpack://ReduxOrm/./src/selectors/ModelSelectorSpec.js","webpack://ReduxOrm/./src/selectors/FieldSelectorSpec.js","webpack://ReduxOrm/./src/selectors/index.js","webpack://ReduxOrm/./src/ORM.js","webpack://ReduxOrm/./src/memoize.js","webpack://ReduxOrm/./src/redux.js","webpack://ReduxOrm/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","subClass","superClass","constructor","__proto__","_typeof","obj","iterator","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","defaultMemoize","func","arguments","undefined","lastArgs","lastResult","apply","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","concat","selector","params","push","resetRecomputations","createStructuredSelector","selectors","selectorCreator","createSelector","objectKeys","keys","_len3","values","_key3","reduce","composition","index","reselect","isStringOrNumber","FlatObjectCache","this","_cache","_proto","set","selectorFn","remove","clear","isValidCacheKey","cacheKey","defaultCacheCreator","defaultCacheKeyValidator","createCachedSelector","polymorphicOptions","legacyOptions","options","assign","keySelector","cache","cacheObject","keySelectorCreator","inputSelectors","cacheResponse","console","warn","getMatchingSelector","removeMatchingSelector","clearCache","validateCacheSize","cacheSize","Number","isInteger","FifoObjectCache","_temp","_cacheOrdering","_cacheSize","earliest","indexOf","splice","LruObjectCache","_registerCacheHit","_deleteCacheHit","FlatMapCache","Map","FifoMapCache","size","LruMapCache","has","FifoCacheObject","FlatCacheObject","LruCacheObject","createStructuredCachedSelector","default","arrayMap","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","collection","iteratees","orders","result","iteratee","other","array","predicate","resIndex","baseOrderBy","guard","arrayFilter","baseFilter","negate","baseFlatten","baseRest","isIterateeCall","sortBy","arr2","iter","toString","from","TypeError","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","FUNC_ERROR_TEXT","args","overRest","setToString","start","nativeMax","Math","max","transform","otherArgs","thisArg","_isPlaceholder","_curry1","fn","f1","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_curry2","f2","_b","_a","_curryN","received","combined","argsIdx","left","combinedIdx","forOwn","OWNER_ID_TAG","canMutate","ownerID","getBatchToken","prepareNewObject","instance","addOwnerID","forceArray","arg","PATH_SEPARATOR","normalizePath","pathArg","split","mutableSet","mutableMerge","isDeep","_mergeObjs","baseObj","mergeObjs","forEach","mergeObj","assignValue","mutableShallowMerge","mutableDeepMerge","mutableOmit","_keys","shouldMergeKey","immutableMerge","hasChanges","nextObject","willChange","mergeValue","currentValue","recursiveMergeResult","immutableDeepMerge","immutableArrSet","newArr","copied","fastArrayCopy","mutableArrFilter","currIndex","originalIndex","mutableArrSplice","deleteCount","_vals","vals","mutableArrInsert","immutableArrSplice","slice","immutableArrInsert","immutableOperations","merge","deepMerge","omit","keysInObj","filter","newObj","setIn","_pathArg","acc","currRef","valueInPath","pathLen","rootObj","curr","idx","currType","_newObj","pathRepr","insert","isArrayLike","mutableOperations","originalPathArg","done","immutableOps","mutableOps","batchOps","mutable","batch","batched","_token","_fn","token","immutableOpsBoundToToken","__","getImmutableOps","UPDATE","DELETE","CREATE","FILTER","EXCLUDE","SUCCESS","ALL_INSTANCES","ID_ARG_KEY_SELECTOR","_state","idArg","warnDeprecated","msg","log","m2mName","declarationModelName","fieldName","string","charAt","toUpperCase","m2mFromFieldName","m2mToFieldName","otherModelName","querySetDelegatorFactory","methodName","getQuerySet","querySetGetterDelegatorFactory","getterName","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","currClass","Function","getPrototypeOf","forEachSuperClass","cls","defined","getOwnPropertyDescriptor","normalizeEntity","entity","getId","ops","clauseFiltersByAttribute","type","payload","attribute","attributeValue","mapValues","entries","newObject","normalizeModelReference","modelNameOrClass","modelName","QuerySet","clauses","opts","_opts","addSharedMethod","_new","userOpts","_evaluate","rows","id","withId","toRefArray","toModelArray","ModelClass","count","exists","Boolean","at","first","last","all","lookupObj","normalizedLookupObj","filterDescriptor","exclude","excludeDescriptor","session","_evaluated","table","querySpec","query","orderBy","orderByDescriptor","update","applyUpdate","action","delete","model","_onDelete","Session","schema","db","state","withMutations","batchToken","getEmptyState","initialState","modelData","models","getModelClasses","sessionBoundModels","SessionBoundModel","Reflect","construct","setPrototypeOf","connect","getDataForModel","getModelData","markAccessed","modelIds","data","accessedInstances","markFullTableScanned","fullTableScanned","markAccessedIndexes","indexes","attr","accessedIndexes","updateSpec","tx","_getTransaction","status","_markAccessedByQuery","includes","idAttribute","accessedIds","Set","row","anyClauseFilteredByPk","some","clause","add","getNextState","DefaultFieldInstaller","installForwardsDescriptor","field","createForwardsDescriptor","toModel","throughModel","installForwardsVirtualField","virtualFields","createForwardsVirtualField","installBackwardsDescriptor","backwardsFieldName","toModelName","createBackwardsDescriptor","installBackwardsVirtualField","createBackwardsVirtualField","orm","references","run","installsForwardsVirtualField","installsBackwardsDescriptor","installsBackwardsVirtualField","_toModel","_throughModel","throughModelName","getThroughModelName","getBackwardsFieldName","Field","getClass","forwardsManyToOneDescriptor","declaredToModelName","DeclaredToModel","toId","_fields","manyToManyDescriptor","declaredFromModelName","throughFields","reverse","DeclaredFromModel","ThroughModel","ThisModel","OtherModel","thisReferencingField","to","otherReferencingField","thisId","throughQs","referencedOtherIds","qs","otherModelInstance","entities","idsToAdd","existingQs","through","existingIds","idsToRemove","entitiesToDelete","entitiesToDeleteIds","unexistingIds","Attribute","getDefault","attrDescriptor","RelationalField","relatedName","as","toLowerCase","ForeignKey","declaredFieldName","ManyToMany","getThroughFields","fieldAName","fieldBName","fieldA","fields","throughModelFieldReferencing","otherModel","find","someFieldName","OneToOne","forwardsOneToOneDescriptor","fk","many","oneToOne","getByIdQuery","modelInstance","Model","_initFields","propsObj","ids","_session","QuerySetClass","invalidateClassCache","isSetUp","tableOptions","backend","userProps","m2mRelations","declaredFieldNames","declaredVirtualFieldNames","valuePassed","_refreshMany2Many","upsert","idExists","_findDatabaseRows","equals","entriesInA","objectShallowEquals","propertyName","userMergeObj","mergeKey","mergedFields","updatedModel","refreshFromState","ref","relations","normalizedNewIds","uniqueIds","fromField","toField","diffActions","sourceArr","targetArr","itemsInBoth","item","deleteItems","addItems","arrayDiffActions","idsToDelete","relatedQs","hasId","describe","DEFAULT_TABLE_OPTIONS","arrName","mapName","Table","accessId","branch","accessIds","accessIdList","accessList","getMaxId","getMeta","setMaxId","newMaxId","setMeta","nextId","meta","optimallyOrderedClauses","clauseReducesResultSetSize","reducer","remainingPayload","withoutPkAttr","filterAttr","indexAttrs","lastIndex","indexedIds","indexSet","withoutIndexAttrs","reject","convert","order","normalizeOrders","entry","workingState","_currMax","userPassedId","newMax","newId","currMax","idSequencer","finalEntry","indexesToAppendTo","fkAttr","attrIndex","created","nextIndexes","indexMap","indexedAttrs","indexIdsToAdd","indexIdsToDelete","nextMap","prevAttrValues","valueMap","mergeObjInto","nextAttrValues","nextRow","prevValue","nextValue","rowId","valueIndex","attrIndexMap","BASE_EMPTY_STATE","tables","tableName","nextTableState","resultPayload","currTableState","nextDBState","newTableState","replaceTableState","createDatabase","schemaSpec","tableSpecs","tableSpec","SelectorSpec","parent","_parent","_orm","cachePath","ModelBasedSelectorSpec","_model","valueForInstance","idArgSelector","MapSelectorSpec","_field","_selector","createResultFunc","parentSelector","parentResult","single","refArray","ModelSelectorSpec","FieldSelectorSpec","fieldModel","accessorName","isVirtual","_fieldModel","_accessorName","_isVirtual","ParentToModel","parentRef","parentInstance","JSON","stringify","getDatabase","createFieldSelectorSpec","fieldSelectorSpec","relatedFieldName","relatedField","fieldAccessorName","ORM_DEFAULTS","defaultCreateDatabase","RESERVED_TABLE_OPTIONS","isReservedTableOption","word","ORM","registry","implicitThroughModels","installedFields","stateSelector","register","registerManyToManyModelsFor","_setupModelPrototypes","modelSelectorSpec","createModelSelectorSpec","thisModelName","fieldInstance","selfReferencing","fromFieldName","toFieldName","Through","PlainForeignKey","ForeignKeyClass","allModels","found","generateSchemaSpec","spec","mutableSession","_isFieldInstalled","_installField","_setFieldInstalled","FieldInstaller","installerClass","getDefaultState","isOrmState","argsAreEqual","nextArgs","accessedModelInstancesAreEqual","previous","ormState","instances","previousRows","rowsA","rowsB","rowsAreEqual","accessedIndexesAreEqual","column","fullTableScannedModelsAreEqual","fullTableScannedModels","argEqualityCheck","stateAndArgs","argsWithSession","accessedModelInstances","defaultUpdater","createReducer","updater","toORM","selectorCache","SELECTOR_KEY","for","toSelector","level","storageKey","createSelectorFromSpec","resultArg","inputFuncs","Schema","Backend"],"mappings":"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","file":"redux-orm.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ReduxOrm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxOrm\"] = factory();\n\telse\n\t\troot[\"ReduxOrm\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 33);\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","'use strict';\n\nexports.__esModule = true;\nexports.defaultMemoize = defaultMemoize;\nexports.createSelectorCreator = createSelectorCreator;\nexports.createStructuredSelector = createStructuredSelector;\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = defaultMemoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('reselect')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'reselect'], factory) :\n  (global = global || self, factory(global['Re-reselect'] = {}, global.Reselect));\n}(this, function (exports, reselect) { 'use strict';\n\n  function isStringOrNumber(value) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  var FlatObjectCache =\n  /*#__PURE__*/\n  function () {\n    function FlatObjectCache() {\n      this._cache = {};\n    }\n\n    var _proto = FlatObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n    };\n\n    _proto.get = function get(key) {\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return FlatObjectCache;\n  }();\n\n  var defaultCacheCreator = FlatObjectCache;\n\n  var defaultCacheKeyValidator = function defaultCacheKeyValidator() {\n    return true;\n  };\n\n  function createCachedSelector() {\n    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n      funcs[_key] = arguments[_key];\n    }\n\n    return function (polymorphicOptions, legacyOptions) {\n      // @NOTE Versions 0.x/1.x accepted \"options\" as a function\n      if (typeof legacyOptions === 'function') {\n        throw new Error('[re-reselect] Second argument \"options\" must be an object. Please use \"options.selectorCreator\" to provide a custom selectorCreator.');\n      }\n\n      var options = {};\n\n      if (typeof polymorphicOptions === 'function') {\n        Object.assign(options, legacyOptions, {\n          keySelector: polymorphicOptions\n        }); // @TODO add legacyOptions deprecation notice in next major release\n      } else {\n        Object.assign(options, polymorphicOptions);\n      } // https://github.com/reduxjs/reselect/blob/v4.0.0/src/index.js#L54\n\n\n      var recomputations = 0;\n      var resultFunc = funcs.pop();\n      var dependencies = Array.isArray(funcs[0]) ? funcs[0] : [].concat(funcs);\n\n      var resultFuncWithRecomputations = function resultFuncWithRecomputations() {\n        recomputations++;\n        return resultFunc.apply(void 0, arguments);\n      };\n\n      funcs.push(resultFuncWithRecomputations);\n      var cache = options.cacheObject || new defaultCacheCreator();\n      var selectorCreator = options.selectorCreator || reselect.createSelector;\n      var isValidCacheKey = cache.isValidCacheKey || defaultCacheKeyValidator;\n\n      if (options.keySelectorCreator) {\n        options.keySelector = options.keySelectorCreator({\n          keySelector: options.keySelector,\n          inputSelectors: dependencies,\n          resultFunc: resultFunc\n        });\n      } // Application receives this function\n\n\n      var selector = function selector() {\n        var cacheKey = options.keySelector.apply(options, arguments);\n\n        if (isValidCacheKey(cacheKey)) {\n          var cacheResponse = cache.get(cacheKey);\n\n          if (cacheResponse === undefined) {\n            cacheResponse = selectorCreator.apply(void 0, funcs);\n            cache.set(cacheKey, cacheResponse);\n          }\n\n          return cacheResponse.apply(void 0, arguments);\n        }\n\n        console.warn(\"[re-reselect] Invalid cache key \\\"\" + cacheKey + \"\\\" has been returned by keySelector function.\");\n        return undefined;\n      }; // Further selector methods\n\n\n      selector.getMatchingSelector = function () {\n        var cacheKey = options.keySelector.apply(options, arguments); // @NOTE It might update cache hit count in LRU-like caches\n\n        return cache.get(cacheKey);\n      };\n\n      selector.removeMatchingSelector = function () {\n        var cacheKey = options.keySelector.apply(options, arguments);\n        cache.remove(cacheKey);\n      };\n\n      selector.clearCache = function () {\n        cache.clear();\n      };\n\n      selector.resultFunc = resultFunc;\n      selector.dependencies = dependencies;\n      selector.cache = cache;\n\n      selector.recomputations = function () {\n        return recomputations;\n      };\n\n      selector.resetRecomputations = function () {\n        return recomputations = 0;\n      };\n\n      selector.keySelector = options.keySelector;\n      return selector;\n    };\n  }\n\n  function createStructuredCachedSelector(selectors) {\n    return reselect.createStructuredSelector(selectors, createCachedSelector);\n  }\n\n  function validateCacheSize(cacheSize) {\n    if (cacheSize === undefined) {\n      throw new Error('Missing the required property \"cacheSize\".');\n    }\n\n    if (!Number.isInteger(cacheSize) || cacheSize <= 0) {\n      throw new Error('The \"cacheSize\" property must be a positive integer value.');\n    }\n  }\n\n  var FifoObjectCache =\n  /*#__PURE__*/\n  function () {\n    function FifoObjectCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = {};\n      this._cacheOrdering = [];\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = FifoObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n\n      this._cacheOrdering.push(key);\n\n      if (this._cacheOrdering.length > this._cacheSize) {\n        var earliest = this._cacheOrdering[0];\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      var index = this._cacheOrdering.indexOf(key);\n\n      if (index > -1) {\n        this._cacheOrdering.splice(index, 1);\n      }\n\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n      this._cacheOrdering = [];\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return FifoObjectCache;\n  }();\n\n  var LruObjectCache =\n  /*#__PURE__*/\n  function () {\n    function LruObjectCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = {};\n      this._cacheOrdering = [];\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = LruObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n\n      this._registerCacheHit(key);\n\n      if (this._cacheOrdering.length > this._cacheSize) {\n        var earliest = this._cacheOrdering[0];\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      this._registerCacheHit(key);\n\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      this._deleteCacheHit(key);\n\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n      this._cacheOrdering = [];\n    };\n\n    _proto._registerCacheHit = function _registerCacheHit(key) {\n      this._deleteCacheHit(key);\n\n      this._cacheOrdering.push(key);\n    };\n\n    _proto._deleteCacheHit = function _deleteCacheHit(key) {\n      var index = this._cacheOrdering.indexOf(key);\n\n      if (index > -1) {\n        this._cacheOrdering.splice(index, 1);\n      }\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return LruObjectCache;\n  }();\n\n  var FlatMapCache =\n  /*#__PURE__*/\n  function () {\n    function FlatMapCache() {\n      this._cache = new Map();\n    }\n\n    var _proto = FlatMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n    };\n\n    _proto.get = function get(key) {\n      return this._cache.get(key);\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache[\"delete\"](key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return FlatMapCache;\n  }();\n\n  var FifoMapCache =\n  /*#__PURE__*/\n  function () {\n    function FifoMapCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = new Map();\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = FifoMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n\n      if (this._cache.size > this._cacheSize) {\n        var earliest = this._cache.keys().next().value;\n\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      return this._cache.get(key);\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache[\"delete\"](key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return FifoMapCache;\n  }();\n\n  var LruMapCache =\n  /*#__PURE__*/\n  function () {\n    function LruMapCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = new Map();\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = LruMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n\n      if (this._cache.size > this._cacheSize) {\n        var earliest = this._cache.keys().next().value;\n\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      var value = this._cache.get(key); // Register cache hit\n\n\n      if (this._cache.has(key)) {\n        this.remove(key);\n\n        this._cache.set(key, value);\n      }\n\n      return value;\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache[\"delete\"](key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return LruMapCache;\n  }();\n\n  exports.FifoCacheObject = FifoObjectCache;\n  exports.FifoMapCache = FifoMapCache;\n  exports.FifoObjectCache = FifoObjectCache;\n  exports.FlatCacheObject = FlatObjectCache;\n  exports.FlatMapCache = FlatMapCache;\n  exports.FlatObjectCache = FlatObjectCache;\n  exports.LruCacheObject = LruMapCache;\n  exports.LruMapCache = LruMapCache;\n  exports.LruObjectCache = LruObjectCache;\n  exports.createStructuredCachedSelector = createStructuredCachedSelector;\n  exports.default = createCachedSelector;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=index.js.map\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    negate = require('./negate');\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nmodule.exports = reject;\n","var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nmodule.exports = head;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _curry1 from './_curry1.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default { '@@functional/placeholder': true };","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { curry, __ as placeholder } from 'ramda';\n\nfunction forOwn(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(obj[key], key);\n    }\n  }\n}\n\nfunction isArrayLike(value) {\n  return value && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n}\n\nvar OWNER_ID_TAG = '@@_______immutableOpsOwnerID';\n\nfunction fastArrayCopy(arr) {\n  var copied = new Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    copied[i] = arr[i];\n  }\n\n  return copied;\n}\n\nexport function canMutate(obj, ownerID) {\n  if (!ownerID) return false;\n  return obj[OWNER_ID_TAG] === ownerID;\n}\nvar newOwnerID = typeof Symbol === 'function' ? function () {\n  return Symbol('ownerID');\n} : function () {\n  return {};\n};\nexport var getBatchToken = newOwnerID;\n\nfunction addOwnerID(obj, ownerID) {\n  Object.defineProperty(obj, OWNER_ID_TAG, {\n    value: ownerID,\n    configurable: true,\n    enumerable: false\n  });\n  return obj;\n}\n\nfunction prepareNewObject(instance, ownerID) {\n  if (ownerID) {\n    addOwnerID(instance, ownerID);\n  }\n\n  return instance;\n}\n\nfunction forceArray(arg) {\n  if (!(arg instanceof Array)) {\n    return [arg];\n  }\n\n  return arg;\n}\n\nvar PATH_SEPARATOR = '.';\n\nfunction normalizePath(pathArg) {\n  if (typeof pathArg === 'string') {\n    if (pathArg.indexOf(PATH_SEPARATOR) === -1) {\n      return [pathArg];\n    }\n\n    return pathArg.split(PATH_SEPARATOR);\n  }\n\n  return pathArg;\n}\n\nfunction mutableSet(key, value, obj) {\n  obj[key] = value;\n  return obj;\n}\n\nfunction mutableSetIn(_pathArg, value, obj) {\n  var originalPathArg = normalizePath(_pathArg);\n  var pathLen = originalPathArg.length;\n  var done = false;\n  var idx = 0;\n  var acc = obj;\n  var curr = originalPathArg[idx];\n\n  while (!done) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      done = true;\n    } else {\n      var currType = _typeof(acc[curr]);\n\n      if (currType === 'undefined') {\n        var newObj = {};\n        prepareNewObject(newObj, null);\n        acc[curr] = newObj;\n      } else if (currType !== 'object') {\n        var pathRepr = \"\".concat(originalPathArg[idx - 1], \".\").concat(curr);\n        throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n      }\n\n      acc = acc[curr];\n      idx++;\n      curr = originalPathArg[idx];\n    }\n  }\n\n  return obj;\n}\n\nfunction valueInPath(_pathArg, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var acc = obj;\n\n  for (var i = 0; i < pathArg.length; i++) {\n    var curr = pathArg[i];\n    var currRef = acc[curr];\n\n    if (i === pathArg.length - 1) {\n      return currRef;\n    }\n\n    if (_typeof(currRef) === 'object') {\n      acc = currRef;\n    } else {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}\n\nfunction immutableSetIn(ownerID, _pathArg, value, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var currentValue = valueInPath(pathArg, obj);\n  if (value === currentValue) return obj;\n  var pathLen = pathArg.length;\n  var acc;\n\n  if (canMutate(obj, ownerID)) {\n    acc = obj;\n  } else {\n    acc = Object.assign(prepareNewObject({}, ownerID), obj);\n  }\n\n  var rootObj = acc;\n  pathArg.forEach(function (curr, idx) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      return;\n    }\n\n    var currRef = acc[curr];\n\n    var currType = _typeof(currRef);\n\n    if (currType === 'object') {\n      if (canMutate(currRef, ownerID)) {\n        acc = currRef;\n      } else {\n        var newObj = prepareNewObject({}, ownerID);\n        acc[curr] = Object.assign(newObj, currRef);\n        acc = newObj;\n      }\n\n      return;\n    }\n\n    if (currType === 'undefined') {\n      var _newObj = prepareNewObject({}, ownerID);\n\n      acc[curr] = _newObj;\n      acc = _newObj;\n      return;\n    }\n\n    var pathRepr = \"\".concat(pathArg[idx - 1], \".\").concat(curr);\n    throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n  });\n  return rootObj;\n}\n\nfunction mutableMerge(isDeep, _mergeObjs, baseObj) {\n  var mergeObjs = forceArray(_mergeObjs);\n\n  if (isDeep) {\n    mergeObjs.forEach(function (mergeObj) {\n      forOwn(mergeObj, function (value, key) {\n        if (isDeep && baseObj.hasOwnProperty(key)) {\n          var assignValue;\n\n          if (_typeof(value) === 'object') {\n            assignValue = mutableMerge(isDeep, [value], baseObj[key]);\n          } else {\n            assignValue = value;\n          }\n\n          baseObj[key] = assignValue;\n        } else {\n          baseObj[key] = value;\n        }\n      });\n    });\n  } else {\n    Object.assign.apply(Object, [baseObj].concat(_toConsumableArray(mergeObjs)));\n  }\n\n  return baseObj;\n}\n\nvar mutableShallowMerge = mutableMerge.bind(null, false);\nvar mutableDeepMerge = mutableMerge.bind(null, true);\n\nfunction mutableOmit(_keys, obj) {\n  var keys = forceArray(_keys);\n  keys.forEach(function (key) {\n    delete obj[key];\n  });\n  return obj;\n}\n\nfunction shouldMergeKey(obj, other, key) {\n  return obj[key] !== other[key];\n}\n\nfunction immutableMerge(isDeep, ownerID, _mergeObjs, obj) {\n  if (canMutate(obj, ownerID)) return mutableMerge(isDeep, _mergeObjs, obj);\n  var mergeObjs = forceArray(_mergeObjs);\n  var hasChanges = false;\n  var nextObject = obj;\n\n  var willChange = function willChange() {\n    if (!hasChanges) {\n      hasChanges = true;\n      nextObject = Object.assign({}, obj);\n      prepareNewObject(nextObject, ownerID);\n    }\n  };\n\n  mergeObjs.forEach(function (mergeObj) {\n    forOwn(mergeObj, function (mergeValue, key) {\n      if (isDeep && obj.hasOwnProperty(key)) {\n        var currentValue = nextObject[key];\n\n        if (_typeof(mergeValue) === 'object' && !(mergeValue instanceof Array)) {\n          if (shouldMergeKey(nextObject, mergeObj, key)) {\n            var recursiveMergeResult = immutableMerge(isDeep, ownerID, mergeValue, currentValue);\n\n            if (recursiveMergeResult !== currentValue) {\n              willChange();\n              nextObject[key] = recursiveMergeResult;\n            }\n          }\n\n          return true; // continue forOwn\n        }\n      }\n\n      if (shouldMergeKey(nextObject, mergeObj, key)) {\n        willChange();\n        nextObject[key] = mergeValue;\n      }\n\n      return undefined;\n    });\n  });\n  return nextObject;\n}\n\nvar immutableDeepMerge = immutableMerge.bind(null, true);\nvar immutableShallowMerge = immutableMerge.bind(null, false);\n\nfunction immutableArrSet(ownerID, index, value, arr) {\n  if (canMutate(arr, ownerID)) return mutableSet(index, value, arr);\n  if (arr[index] === value) return arr;\n  var newArr = fastArrayCopy(arr);\n  newArr[index] = value;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nfunction immutableSet(ownerID, key, value, obj) {\n  if (isArrayLike(obj)) return immutableArrSet(ownerID, key, value, obj);\n  if (canMutate(obj, ownerID)) return mutableSet(key, value, obj);\n  if (obj[key] === value) return obj;\n  var newObj = Object.assign({}, obj);\n  prepareNewObject(newObj, ownerID);\n  newObj[key] = value;\n  return newObj;\n}\n\nfunction immutableOmit(ownerID, _keys, obj) {\n  if (canMutate(obj, ownerID)) return mutableOmit(_keys, obj);\n  var keys = forceArray(_keys);\n  var keysInObj = keys.filter(function (key) {\n    return obj.hasOwnProperty(key);\n  }); // None of the keys were in the object, so we can return `obj`.\n\n  if (keysInObj.length === 0) return obj;\n  var newObj = Object.assign({}, obj);\n  keysInObj.forEach(function (key) {\n    delete newObj[key];\n  });\n  prepareNewObject(newObj, ownerID);\n  return newObj;\n}\n\nfunction mutableArrPush(_vals, arr) {\n  var vals = forceArray(_vals);\n  arr.push.apply(arr, _toConsumableArray(vals));\n  return arr;\n}\n\nfunction mutableArrFilter(func, arr) {\n  var currIndex = 0;\n  var originalIndex = 0;\n\n  while (currIndex < arr.length) {\n    var item = arr[currIndex];\n\n    if (!func(item, originalIndex)) {\n      arr.splice(currIndex, 1);\n    } else {\n      currIndex++;\n    }\n\n    originalIndex++;\n  }\n\n  return arr;\n}\n\nfunction mutableArrSplice(index, deleteCount, _vals, arr) {\n  var vals = forceArray(_vals);\n  arr.splice.apply(arr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return arr;\n}\n\nfunction mutableArrInsert(index, _vals, arr) {\n  return mutableArrSplice(index, 0, _vals, arr);\n}\n\nfunction immutableArrSplice(ownerID, index, deleteCount, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrSplice(index, deleteCount, _vals, arr);\n  var vals = forceArray(_vals);\n  var newArr = arr.slice();\n  prepareNewObject(newArr, ownerID);\n  newArr.splice.apply(newArr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return newArr;\n}\n\nfunction immutableArrInsert(ownerID, index, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrInsert(index, _vals, arr);\n  return immutableArrSplice(ownerID, index, 0, _vals, arr);\n}\n\nfunction immutableArrPush(ownerID, vals, arr) {\n  return immutableArrInsert(ownerID, arr.length, vals, arr);\n}\n\nfunction immutableArrFilter(ownerID, func, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrFilter(func, arr);\n  var newArr = arr.filter(func);\n  if (newArr.length === arr.length) return arr;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nvar immutableOperations = {\n  // object operations\n  merge: immutableShallowMerge,\n  deepMerge: immutableDeepMerge,\n  omit: immutableOmit,\n  setIn: immutableSetIn,\n  // array operations\n  insert: immutableArrInsert,\n  push: immutableArrPush,\n  filter: immutableArrFilter,\n  splice: immutableArrSplice,\n  // both\n  set: immutableSet\n};\nvar mutableOperations = {\n  // object operations\n  merge: mutableShallowMerge,\n  deepMerge: mutableDeepMerge,\n  omit: mutableOmit,\n  setIn: mutableSetIn,\n  // array operations\n  insert: mutableArrInsert,\n  push: mutableArrPush,\n  filter: mutableArrFilter,\n  splice: mutableArrSplice,\n  // both\n  set: mutableSet\n};\nexport function getImmutableOps() {\n  var immutableOps = Object.assign({}, immutableOperations);\n  forOwn(immutableOps, function (value, key) {\n    immutableOps[key] = curry(value.bind(null, null));\n  });\n  var mutableOps = Object.assign({}, mutableOperations);\n  forOwn(mutableOps, function (value, key) {\n    mutableOps[key] = curry(value);\n  });\n  var batchOps = Object.assign({}, immutableOperations);\n  forOwn(batchOps, function (value, key) {\n    batchOps[key] = curry(value);\n  });\n\n  function batched(_token, _fn) {\n    var token;\n    var fn;\n\n    if (typeof _token === 'function') {\n      fn = _token;\n      token = getBatchToken();\n    } else {\n      token = _token;\n      fn = _fn;\n    }\n\n    var immutableOpsBoundToToken = Object.assign({}, immutableOperations);\n    forOwn(immutableOpsBoundToToken, function (value, key) {\n      immutableOpsBoundToToken[key] = curry(value.bind(null, token));\n    });\n    return fn(immutableOpsBoundToToken);\n  }\n\n  return Object.assign(immutableOps, {\n    mutable: mutableOps,\n    batch: batchOps,\n    batched: batched,\n    __: placeholder,\n    getBatchToken: getBatchToken\n  });\n}\nexport var ops = getImmutableOps();\nexport default ops;","export const UPDATE = \"REDUX_ORM_UPDATE\";\nexport const DELETE = \"REDUX_ORM_DELETE\";\nexport const CREATE = \"REDUX_ORM_CREATE\";\n\nexport const FILTER = \"REDUX_ORM_FILTER\";\nexport const EXCLUDE = \"REDUX_ORM_EXCLUDE\";\nexport const ORDER_BY = \"REDUX_ORM_ORDER_BY\";\n\nexport const SUCCESS = \"SUCCESS\";\nexport const FAILURE = \"FAILURE\";\n\n// for detecting ORM state objects\nexport const STATE_FLAG = \"@@_______REDUX_ORM_STATE_FLAG\";\n\n// for caching selectors based on their ID argument\nexport const ALL_INSTANCES = Symbol(\"REDUX_ORM_ALL_INSTANCES\");\nexport const ID_ARG_KEY_SELECTOR = (_state, idArg) =>\n    typeof idArg === \"undefined\" ? ALL_INSTANCES : idArg;\n","import ops from \"immutable-ops\";\nimport { FILTER, EXCLUDE } from \"./constants\";\n\n/**\n * @module utils\n * @private\n */\n\n/** @private */\nfunction warnDeprecated(msg) {\n    const logger =\n        typeof console.warn === \"function\"\n            ? console.warn.bind(console)\n            : console.log.bind(console);\n    return logger(msg);\n}\n\n/** @private */\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\nfunction m2mName(declarationModelName, fieldName) {\n    return declarationModelName + capitalize(fieldName);\n}\n\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\nfunction m2mFromFieldName(declarationModelName) {\n    return `from${declarationModelName}Id`;\n}\n\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\nfunction m2mToFieldName(otherModelName) {\n    return `to${otherModelName}Id`;\n}\n\n/** */\nfunction reverseFieldName(modelName) {\n    return modelName.toLowerCase() + \"Set\"; // eslint-disable-line prefer-template\n}\n\n/** @private */\nfunction querySetDelegatorFactory(methodName) {\n    return function querySetDelegator(...args) {\n        return this.getQuerySet()[methodName](...args);\n    };\n}\n\n/** @private */\nfunction querySetGetterDelegatorFactory(getterName) {\n    return function querySetGetterDelegator() {\n        const qs = this.getQuerySet();\n        return qs[getterName];\n    };\n}\n\n/** @private */\nfunction forEachSuperClass(subClass, func) {\n    let currClass = subClass;\n    while (currClass !== Function.prototype) {\n        func(currClass);\n        currClass = Object.getPrototypeOf(currClass);\n    }\n}\n\n/** */\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n    const leftToDefine = querySetClass.sharedMethods.slice();\n\n    // There is no way to get a property descriptor for the whole prototype chain;\n    // only from an objects own properties. Therefore we traverse the whole prototype\n    // chain for querySet.\n    forEachSuperClass(querySetClass, cls => {\n        for (let i = 0; i < leftToDefine.length; i++) {\n            let defined = false;\n            const methodName = leftToDefine[i];\n            const descriptor = Object.getOwnPropertyDescriptor(\n                cls.prototype,\n                methodName\n            );\n            if (typeof descriptor !== \"undefined\") {\n                if (typeof descriptor.get !== \"undefined\") {\n                    descriptor.get = querySetGetterDelegatorFactory(methodName);\n                    Object.defineProperty(modelClass, methodName, descriptor);\n                } else {\n                    modelClass[methodName] = querySetDelegatorFactory(\n                        methodName\n                    );\n                }\n                defined = true;\n            }\n            if (defined) {\n                leftToDefine.splice(i--, 1);\n            }\n        }\n    });\n}\n\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\nfunction normalizeEntity(entity) {\n    if (\n        entity !== null &&\n        typeof entity !== \"undefined\" &&\n        typeof entity.getId === \"function\"\n    ) {\n        return entity.getId();\n    }\n    return entity;\n}\n\n/** */\nfunction reverseFieldErrorMessage(\n    modelName,\n    fieldName,\n    toModelName,\n    backwardsFieldName\n) {\n    return [\n        `Reverse field ${backwardsFieldName} already defined`,\n        ` on model ${toModelName}. To fix, set a custom related`,\n        ` name on ${modelName}.${fieldName}.`,\n    ].join(\"\");\n}\n\n/**\n * Fastest way to check if two objects are equal.\n * Object and array values have to be referentially equal.\n */\nfunction objectShallowEquals(a, b) {\n    const entriesInA = Object.entries(Object(a));\n\n    if (entriesInA.length !== Object.keys(b).length) {\n        return false;\n    }\n\n    return entriesInA.every(\n        ([key, value]) => b.hasOwnProperty(key) && b[key] === value\n    );\n}\n\n/** */\nfunction arrayDiffActions(sourceArr, targetArr) {\n    const itemsInBoth = sourceArr.filter(item => targetArr.includes(item));\n    const deleteItems = sourceArr.filter(item => !itemsInBoth.includes(item));\n    const addItems = targetArr.filter(item => !itemsInBoth.includes(item));\n\n    if (deleteItems.length || addItems.length) {\n        return {\n            delete: deleteItems,\n            add: addItems,\n        };\n    }\n    return null;\n}\n\nconst { getBatchToken } = ops;\n\n/**\n * @return boolean\n */\nfunction clauseFiltersByAttribute({ type, payload }, attribute) {\n    if (type !== FILTER) return false;\n\n    if (typeof payload !== \"object\") {\n        /**\n         * payload could also be a function in which case\n         * we would have no way of knowing what it does,\n         * so we default to false for non-objects\n         */\n        return false;\n    }\n\n    if (!payload.hasOwnProperty(attribute)) return false;\n    const attributeValue = payload[attribute];\n    if (attributeValue === null) return false;\n    if (attributeValue === undefined) return false;\n\n    return true;\n}\n\n/**\n * @return boolean\n */\nfunction clauseReducesResultSetSize({ type }) {\n    return [FILTER, EXCLUDE].includes(type);\n}\n\n/**\n * @param {Object} object\n * @return Object\n */\nfunction mapValues(object, func) {\n    return Object.entries(object).reduce((newObject, [key, value]) => {\n        newObject[key] = func(value);\n        return newObject;\n    }, {});\n}\n\n/** */\nfunction normalizeModelReference(modelNameOrClass) {\n    if (!modelNameOrClass || typeof modelNameOrClass === \"string\") {\n        return modelNameOrClass;\n    }\n    return modelNameOrClass.modelName;\n}\n\nexport {\n    attachQuerySetMethods,\n    m2mName,\n    m2mFromFieldName,\n    m2mToFieldName,\n    reverseFieldName,\n    normalizeEntity,\n    reverseFieldErrorMessage,\n    objectShallowEquals,\n    ops,\n    arrayDiffActions,\n    getBatchToken,\n    clauseFiltersByAttribute,\n    clauseReducesResultSetSize,\n    warnDeprecated,\n    mapValues,\n    normalizeModelReference,\n};\n","import { normalizeEntity, warnDeprecated, mapValues } from \"./utils\";\n\nimport { UPDATE, DELETE, FILTER, EXCLUDE, ORDER_BY } from \"./constants\";\n\n/**\n * This class is used to build and make queries to the database\n * and operating the resulting set (such as updating attributes\n * or deleting the records).\n *\n * The queries are built lazily. For example:\n *\n * ```javascript\n * const qs = Book.all()\n *     .filter(book => book.releaseYear > 1999)\n *     .orderBy('name');\n * ```\n *\n * Doesn't execute a query. The query is executed only when\n * you need information from the query result, such as {@link QuerySet#count},\n * {@link QuerySet#toRefArray}. After the query is executed, the resulting\n * set is cached in the QuerySet instance.\n *\n * QuerySet instances also return copies, so chaining filters doesn't\n * mutate the previous instances.\n */\nconst QuerySet = class QuerySet {\n    /**\n     * Creates a QuerySet. The constructor is mainly for internal use;\n     * You should access QuerySet instances from {@link Model}.\n     *\n     * @param  {Model} modelClass - the model class of objects in this QuerySet.\n     * @param  {any[]} clauses - query clauses needed to evaluate the set.\n     * @param {Object} [opts] - additional options\n     */\n    constructor(modelClass, clauses, opts) {\n        Object.assign(this, {\n            modelClass,\n            clauses: clauses || [],\n        });\n\n        this._opts = opts;\n    }\n\n    static addSharedMethod(methodName) {\n        this.sharedMethods = this.sharedMethods.concat(methodName);\n    }\n\n    _new(clauses, userOpts) {\n        const opts = { ...this._opts, ...userOpts };\n        return new this.constructor(this.modelClass, clauses, opts);\n    }\n\n    toString() {\n        this._evaluate();\n        const contents = this.rows\n            .map(({ id }) => this.modelClass.withId(id).toString())\n            .join(\"\\n    - \");\n        return `QuerySet contents:\\n    - ${contents}`;\n    }\n\n    /**\n     * Returns an array of the plain objects represented by the QuerySet.\n     * The plain objects are direct references to the store.\n     *\n     * @return {Object[]} references to the plain JS objects represented by\n     *                    the QuerySet\n     */\n    toRefArray() {\n        return this._evaluate();\n    }\n\n    /**\n     * Returns an array of {@link Model} instances represented by the QuerySet.\n     * @return {Model[]} model instances represented by the QuerySet\n     */\n    toModelArray() {\n        const { modelClass: ModelClass } = this;\n        return this._evaluate().map(props => new ModelClass(props));\n    }\n\n    /**\n     * Returns the number of {@link Model} instances represented by the QuerySet.\n     *\n     * @return {number} length of the QuerySet\n     */\n    count() {\n        this._evaluate();\n        return this.rows.length;\n    }\n\n    /**\n     * Checks if the {@link QuerySet} instance has any records matching the query\n     * in the database.\n     *\n     * @return {Boolean} `true` if the {@link QuerySet} instance contains entities, else `false`.\n     */\n    exists() {\n        return Boolean(this.count());\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `index` in the {@link QuerySet} instance if\n     * `withRefs` flag is set to `false`, or a reference to the plain JavaScript\n     * object in the model state if `true`.\n     *\n     * @param  {number} index - index of the model instance to get\n     * @return {Model|undefined} a {@link Model} instance at index\n     *                           `index` in the {@link QuerySet} instance,\n     *                           or undefined if the index is out of bounds.\n     */\n    at(index) {\n        const { modelClass: ModelClass } = this;\n\n        const rows = this._evaluate();\n        if (index >= 0 && index < rows.length) {\n            return new ModelClass(rows[index]);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns the {@link Model} instance at index 0 in the {@link QuerySet} instance.\n     * @return {Model}\n     */\n    first() {\n        return this.at(0);\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `QuerySet.count() - 1`\n     * @return {Model}\n     */\n    last() {\n        const rows = this._evaluate();\n        return this.at(rows.length - 1);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with the same entities.\n     * @return {QuerySet} a new QuerySet with the same entities.\n     */\n    all() {\n        return this._new(this.clauses);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that match properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to match objects with. Can also be a function.\n     *                              It works the same as [Lodash filter](https://lodash.com/docs/#filter).\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n     */\n    filter(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj =\n            typeof lookupObj === \"object\"\n                ? mapValues(lookupObj, normalizeEntity)\n                : lookupObj;\n\n        const filterDescriptor = {\n            type: FILTER,\n            payload: normalizedLookupObj,\n        };\n        /**\n         * create a new QuerySet\n         * including only rows matching the lookupObj\n         */\n        return this._new(this.clauses.concat(filterDescriptor));\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that do not match\n     * properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to unmatch objects with. Can also be a function.\n     *                              It works the same as [Lodash reject](https://lodash.com/docs/#reject).\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that did not pass the filter.\n     */\n    exclude(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj =\n            typeof lookupObj === \"object\"\n                ? mapValues(lookupObj, normalizeEntity)\n                : lookupObj;\n        const excludeDescriptor = {\n            type: EXCLUDE,\n            payload: normalizedLookupObj,\n        };\n\n        /**\n         * create a new QuerySet\n         * excluding all rows matching the lookupObj\n         */\n        return this._new(this.clauses.concat(excludeDescriptor));\n    }\n\n    /**\n     * Performs the actual database query.\n     * @private\n     * @return {Array} rows corresponding to the QuerySet's clauses\n     */\n    _evaluate() {\n        if (typeof this.modelClass.session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to query the ${this.modelClass.modelName} model's table without a session. `,\n                    \"Create a session using `session = orm.session()` and use \",\n                    `\\`session[\"${this.modelClass.modelName}\"]\\` for querying instead.`,\n                ].join(\"\")\n            );\n        }\n        if (!this._evaluated) {\n            const { session, modelName: table } = this.modelClass;\n            const querySpec = {\n                table,\n                clauses: this.clauses,\n            };\n            this.rows = session.query(querySpec).rows;\n            this._evaluated = true;\n        }\n        return this.rows;\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities ordered by `iteratees` in ascending\n     * order, unless otherwise specified. Delegates to [Lodash orderBy](https://lodash.com/docs/#orderBy).\n     *\n     * @param  {string[]|Function[]} iteratees - an array where each item can be a string or a\n     *                                           function. If a string is supplied, it should\n     *                                           correspond to property on the entity that will\n     *                                           determine the order. If a function is supplied,\n     *                                           it should return the value to order by.\n     * @param {Array<Boolean|'asc'|'desc'>} [orders] - the sort orders of `iteratees`. If unspecified, all iteratees\n     *                               will be sorted in ascending order. `true` and `'asc'`\n     *                               correspond to ascending order, and `false` and `'desc'`\n     *                               to descending order.\n     * @return {QuerySet} a new {@link QuerySet} with objects ordered by `iteratees`.\n     */\n    orderBy(iteratees, orders) {\n        const orderByDescriptor = {\n            type: ORDER_BY,\n            payload: [iteratees, orders],\n        };\n\n        /**\n         * create a new QuerySet\n         * sorting all rows according to the passed arguments\n         */\n        return this._new(this.clauses.concat(orderByDescriptor));\n    }\n\n    /**\n     * Records an update specified with `mergeObj` to all the objects\n     * in the {@link QuerySet} instance.\n     *\n     * @param  {Object} mergeObj - an object to merge with all the objects in this\n     *                             queryset.\n     * @return {undefined}\n     */\n    update(mergeObj) {\n        const { session, modelName: table } = this.modelClass;\n\n        session.applyUpdate({\n            action: UPDATE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n            payload: mergeObj,\n        });\n\n        this._evaluated = false;\n    }\n\n    /**\n     * Records a deletion of all the objects in this {@link QuerySet} instance.\n     * @return {undefined}\n     */\n    delete() {\n        const { session, modelName: table } = this.modelClass;\n\n        this.toModelArray().forEach(\n            model => model._onDelete() // eslint-disable-line no-underscore-dangle\n        );\n\n        session.applyUpdate({\n            action: DELETE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n        });\n\n        this._evaluated = false;\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated\n     * Use {@link QuerySet#toModelArray} or predicate functions that\n     * instantiate Models from refs, e.g. `new Model(ref)`.\n     */\n    get withModels() {\n        throw new Error(\n            \"`QuerySet.prototype.withModels` has been removed. \" +\n                \"Use `.toModelArray()` or predicate functions that \" +\n                \"instantiate Models from refs, e.g. `new Model(ref)`.\"\n        );\n    }\n\n    /**\n     * @deprecated Query building operates on refs only now.\n     */\n    get withRefs() {\n        warnDeprecated(\n            \"`QuerySet.prototype.withRefs` has been deprecated. \" +\n                \"Query building operates on refs only now.\"\n        );\n        return undefined;\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to map.\n     */\n    map() {\n        throw new Error(\n            \"`QuerySet.prototype.map` has been removed. \" +\n                \"Call `.toModelArray()` or `.toRefArray()` first to map.\"\n        );\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to iterate.\n     */\n    forEach() {\n        throw new Error(\n            \"`QuerySet.prototype.forEach` has been removed. \" +\n                \"Call `.toModelArray()` or `.toRefArray()` first to iterate.\"\n        );\n    }\n};\n\nQuerySet.sharedMethods = [\n    \"count\",\n    \"at\",\n    \"all\",\n    \"last\",\n    \"first\",\n    \"filter\",\n    \"exclude\",\n    \"orderBy\",\n    \"update\",\n    \"delete\",\n];\n\nexport default QuerySet;\n","import { getBatchToken } from \"immutable-ops\";\n\nimport { SUCCESS, UPDATE, DELETE } from \"./constants\";\nimport { warnDeprecated, clauseFiltersByAttribute } from \"./utils\";\n\nconst Session = class Session {\n    /**\n     * Creates a new Session.\n     *\n     * @param  {Database} db - a {@link Database} instance\n     * @param  {Object} state - the database state\n     * @param  {Boolean} [withMutations] - whether the session should mutate data\n     * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n     *                                 mutated.\n     */\n    constructor(schema, db, state, withMutations, batchToken) {\n        this.schema = schema;\n        this.db = db;\n        this.state = state || db.getEmptyState();\n        this.initialState = this.state;\n\n        this.withMutations = Boolean(withMutations);\n        this.batchToken = batchToken || getBatchToken();\n\n        this.modelData = {};\n\n        this.models = schema.getModelClasses();\n\n        this.sessionBoundModels = this.models.map(modelClass => {\n            function SessionBoundModel() {\n                return Reflect.construct(\n                    modelClass,\n                    arguments,\n                    SessionBoundModel\n                ); // eslint-disable-line prefer-rest-params\n            }\n            Reflect.setPrototypeOf(\n                SessionBoundModel.prototype,\n                modelClass.prototype\n            );\n            Reflect.setPrototypeOf(SessionBoundModel, modelClass);\n\n            Object.defineProperty(this, modelClass.modelName, {\n                get: () => SessionBoundModel,\n            });\n\n            SessionBoundModel.connect(this);\n            return SessionBoundModel;\n        });\n    }\n\n    getDataForModel(modelName) {\n        if (!this.modelData[modelName]) {\n            this.modelData[modelName] = {};\n        }\n        return this.modelData[modelName];\n    }\n\n    getModelData() {\n        return this.modelData;\n    }\n\n    markAccessed(modelName, modelIds) {\n        const data = this.getDataForModel(modelName);\n        if (!data.accessedInstances) {\n            data.accessedInstances = {};\n        }\n        modelIds.forEach(id => {\n            data.accessedInstances[id] = true;\n        });\n    }\n\n    get accessedModelInstances() {\n        return Object.entries(this.getModelData()).reduce(\n            (result, [key, value]) => {\n                if (value.accessedInstances) {\n                    result[key] = value.accessedInstances;\n                }\n                return result;\n            },\n            {}\n        );\n    }\n\n    markFullTableScanned(modelName) {\n        const data = this.getDataForModel(modelName);\n        data.fullTableScanned = true;\n    }\n\n    get fullTableScannedModels() {\n        return Object.entries(this.getModelData()).reduce(\n            (result, [key, value]) => {\n                if (value.fullTableScanned) {\n                    result.push(key);\n                }\n                return result;\n            },\n            []\n        );\n    }\n\n    markAccessedIndexes(indexes) {\n        indexes.forEach(([table, attr, value]) => {\n            const data = this.getDataForModel(table);\n            if (!data.accessedIndexes) {\n                data.accessedIndexes = {};\n            }\n            data.accessedIndexes[attr] = [\n                ...(data.accessedIndexes[attr] || []),\n                value,\n            ];\n        });\n    }\n\n    get accessedIndexes() {\n        return Object.entries(this.getModelData()).reduce(\n            (result, [key, value]) => {\n                if (value.accessedIndexes) {\n                    result[key] = value.accessedIndexes;\n                }\n                return result;\n            },\n            {}\n        );\n    }\n\n    /**\n     * Applies update to a model state.\n     *\n     * @private\n     * @param {Object} update - the update object. Must have keys\n     *                          `type`, `payload`.\n     */\n    applyUpdate(updateSpec) {\n        const tx = this._getTransaction(updateSpec);\n        const result = this.db.update(updateSpec, tx, this.state);\n        const { status, state, payload } = result;\n\n        if (status !== SUCCESS) {\n            throw new Error(\n                `Applying update failed with status ${status}. Payload: ${payload}`\n            );\n        }\n\n        this.state = state;\n\n        return payload;\n    }\n\n    query(querySpec) {\n        const result = this.db.query(querySpec, this.state);\n\n        this._markAccessedByQuery(querySpec, result);\n\n        return result;\n    }\n\n    _getTransaction(updateSpec) {\n        const { withMutations } = this;\n        const { action } = updateSpec;\n        let { batchToken } = this;\n        if ([UPDATE, DELETE].includes(action)) {\n            batchToken = getBatchToken();\n        }\n        return { batchToken, withMutations };\n    }\n\n    _markAccessedByQuery(querySpec, result) {\n        const { table, clauses } = querySpec;\n        const { rows } = result;\n\n        const { idAttribute } = this[table];\n        const accessedIds = new Set(rows.map(row => row[idAttribute]));\n\n        const anyClauseFilteredByPk = clauses.some(clause => {\n            if (!clauseFiltersByAttribute(clause, idAttribute)) {\n                return false;\n            }\n            /**\n             * We previously knew which row we wanted to access,\n             * so there was no need to scan the entire table.\n             */\n            accessedIds.add(clause.payload[idAttribute]);\n            return true;\n        });\n\n        const accessedIndexes = [];\n        const { indexes } = this.state[table];\n        clauses.forEach(clause => {\n            Object.keys(indexes).forEach(attr => {\n                if (!clauseFiltersByAttribute(clause, attr)) {\n                    return;\n                }\n                const value = clause.payload[attr];\n                accessedIndexes.push([table, attr, value]);\n            });\n        });\n\n        if (anyClauseFilteredByPk) {\n            /**\n             * The clauses have been ordered so that an indexed one was\n             * the first to have been evaluated, and thus only the row\n             * with the specified PK value has actually been accessed.\n             */\n            this.markAccessed(table, accessedIds);\n        } else if (accessedIndexes.length) {\n            /**\n             * At least one clause was optimized using indexes.\n             */\n            this.markAccessed(table, accessedIds);\n            this.markAccessedIndexes(accessedIndexes);\n        } else {\n            /**\n             * At least one clause could not be efficiently optimized\n             * or no clause was specified at all.\n             */\n            this.markFullTableScanned(table);\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Access {@link Session#state} instead.\n     */\n    getNextState() {\n        warnDeprecated(\n            \"`Session.prototype.getNextState` has been deprecated. Access \" +\n                \"the `Session.prototype.state` property instead.\"\n        );\n        return this.state;\n    }\n\n    /**\n     * @deprecated\n     * The Redux integration API is now decoupled from ORM and Session.<br>\n     * See the 0.9 migration guide in the GitHub repo.\n     */\n    reduce() {\n        throw new Error(\n            \"`Session.prototype.reduce` has been removed. The Redux integration API \" +\n                \"is now decoupled from ORM and Session - see the 0.9 migration guide \" +\n                \"in the GitHub repo.\"\n        );\n    }\n};\n\nexport default Session;\n","import FieldInstallerTemplate from \"./FieldInstallerTemplate\";\n\nimport { reverseFieldErrorMessage } from \"../utils\";\n\n/**\n * Default implementation for the template method in FieldInstallerTemplate.\n * @private\n * @memberof module:fields\n */\nexport class DefaultFieldInstaller extends FieldInstallerTemplate {\n    installForwardsDescriptor() {\n        Object.defineProperty(\n            this.model.prototype,\n            this.fieldName,\n            this.field.createForwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installForwardsVirtualField() {\n        this.model.virtualFields[\n            this.fieldName\n        ] = this.field.createForwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n\n    installBackwardsDescriptor() {\n        const backwardsDescriptor = Object.getOwnPropertyDescriptor(\n            this.toModel.prototype,\n            this.backwardsFieldName\n        );\n        if (backwardsDescriptor) {\n            throw new Error(\n                reverseFieldErrorMessage(\n                    this.model.modelName,\n                    this.fieldName,\n                    this.toModel.modelName,\n                    this.backwardsFieldName\n                )\n            );\n        }\n\n        // install backwards descriptor\n        Object.defineProperty(\n            this.toModel.prototype,\n            this.backwardsFieldName,\n            this.field.createBackwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installBackwardsVirtualField() {\n        this.toModel.virtualFields[\n            this.backwardsFieldName\n        ] = this.field.createBackwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n}\n\nexport default DefaultFieldInstaller;\n","/**\n * Defines algorithm for installing a field onto a model and related models.\n * Conforms to the template method behavioral design pattern.\n * @private\n * @memberof module:fields\n */\nexport class FieldInstallerTemplate {\n    constructor(opts) {\n        this.field = opts.field;\n        this.fieldName = opts.fieldName;\n        this.model = opts.model;\n        this.orm = opts.orm;\n        /**\n         * the field itself has no knowledge of the model\n         * it is being installed upon; we need to inform it\n         * that it is a self-referencing field for the field\n         * to be able to make better informed decisions\n         */\n        if (this.field.references(this.model)) {\n            this.field.toModelName = \"this\";\n        }\n    }\n\n    get toModel() {\n        if (typeof this._toModel === \"undefined\") {\n            const { toModelName } = this.field;\n            if (!toModelName) {\n                this._toModel = null;\n            } else if (toModelName === \"this\") {\n                this._toModel = this.model;\n            } else {\n                this._toModel = this.orm.get(toModelName);\n            }\n        }\n        return this._toModel;\n    }\n\n    get throughModel() {\n        if (typeof this._throughModel === \"undefined\") {\n            const throughModelName = this.field.getThroughModelName(\n                this.fieldName,\n                this.model\n            );\n            if (!throughModelName) {\n                this._throughModel = null;\n            } else {\n                this._throughModel = this.orm.get(throughModelName);\n            }\n        }\n        return this._throughModel;\n    }\n\n    get backwardsFieldName() {\n        return this.field.getBackwardsFieldName(this.model);\n    }\n\n    run() {\n        this.installForwardsDescriptor();\n        if (this.field.installsForwardsVirtualField) {\n            this.installForwardsVirtualField();\n        }\n        /**\n         * Install a backwards field on a model as a consequence\n         * of having installed the forwards field on another model.\n         */\n        if (this.field.installsBackwardsDescriptor) {\n            this.installBackwardsDescriptor();\n        }\n        if (this.field.installsBackwardsVirtualField) {\n            this.installBackwardsVirtualField();\n        }\n    }\n}\n\nexport default FieldInstallerTemplate;\n","import DefaultFieldInstaller from \"./DefaultFieldInstaller\";\n\n/**\n * @private\n * @memberof module:fields\n */\nexport class Field {\n    get installerClass() {\n        return DefaultFieldInstaller;\n    }\n\n    getClass() {\n        return this.constructor;\n    }\n\n    references(model) {\n        return false;\n    }\n\n    getThroughModelName(fieldName, model) {\n        return null;\n    }\n\n    get installsForwardsVirtualField() {\n        return false;\n    }\n\n    get installsBackwardsDescriptor() {\n        return false;\n    }\n\n    get installsBackwardsVirtualField() {\n        return false;\n    }\n\n    get index() {\n        return false;\n    }\n}\n\nexport default Field;\n","import { normalizeEntity } from \"./utils\";\n\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n * @private\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\nfunction attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}\n\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n    return {\n        get() {\n            const {\n                session: { [declaredToModelName]: DeclaredToModel },\n            } = this.getClass();\n            const { [fieldName]: toId } = this._fields;\n\n            return DeclaredToModel.withId(toId);\n        },\n        set(value) {\n            this.update({\n                [fieldName]: normalizeEntity(value),\n            });\n        },\n    };\n}\n\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\nfunction forwardsOneToOneDescriptor(...args) {\n    return forwardsManyToOneDescriptor(...args);\n}\n\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: { [declaredFromModelName]: DeclaredFromModel },\n            } = this.getClass();\n\n            return DeclaredFromModel.get({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error(\"Can't mutate a reverse one-to-one relation.\");\n        },\n    };\n}\n\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\nfunction backwardsManyToOneDescriptor(\n    declaredFieldName,\n    declaredFromModelName\n) {\n    return {\n        get() {\n            const {\n                session: { [declaredFromModelName]: DeclaredFromModel },\n            } = this.getClass();\n\n            return DeclaredFromModel.filter({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error(\"Can't mutate a reverse many-to-one relation.\");\n        },\n    };\n}\n\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\nfunction manyToManyDescriptor(\n    declaredFromModelName,\n    declaredToModelName,\n    throughModelName,\n    throughFields,\n    reverse\n) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                    [declaredToModelName]: DeclaredToModel,\n                    [throughModelName]: ThroughModel,\n                },\n            } = this.getClass();\n\n            const ThisModel = reverse ? DeclaredToModel : DeclaredFromModel;\n            const OtherModel = reverse ? DeclaredFromModel : DeclaredToModel;\n\n            const thisReferencingField = reverse\n                ? throughFields.to\n                : throughFields.from;\n            const otherReferencingField = reverse\n                ? throughFields.from\n                : throughFields.to;\n\n            const thisId = this.getId();\n\n            const throughQs = ThroughModel.filter({\n                [thisReferencingField]: thisId,\n            });\n\n            /**\n             * all IDs of instances of the other model that are\n             * referenced by any instance of the current model\n             */\n            const referencedOtherIds = new Set(\n                throughQs.toRefArray().map(obj => obj[otherReferencingField])\n            );\n\n            /**\n             * selects all instances of other model that are referenced\n             * by any instance of the current model\n             */\n            const qs = OtherModel.filter(otherModelInstance =>\n                referencedOtherIds.has(\n                    otherModelInstance[OtherModel.idAttribute]\n                )\n            );\n\n            /**\n             * Allows adding OtherModel instances to be referenced by the current instance.\n             *\n             * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n             * to the first book's list of referenced authors.\n             *\n             * @return undefined\n             */\n            qs.add = function add(...entities) {\n                const idsToAdd = new Set(entities.map(normalizeEntity));\n\n                const existingQs = throughQs.filter(through =>\n                    idsToAdd.has(through[otherReferencingField])\n                );\n\n                if (existingQs.exists()) {\n                    const existingIds = existingQs\n                        .toRefArray()\n                        .map(through => through[otherReferencingField]);\n\n                    throw new Error(\n                        `Tried to add already existing ${OtherModel.modelName} id(s) ${existingIds} to the ${ThisModel.modelName} instance with id ${thisId}`\n                    );\n                }\n\n                idsToAdd.forEach(id => {\n                    ThroughModel.create({\n                        [otherReferencingField]: id,\n                        [thisReferencingField]: thisId,\n                    });\n                });\n            };\n\n            /**\n             * Removes references to all OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.clear() would cause the first book's list\n             * of referenced authors to become empty.\n             *\n             * @return undefined\n             */\n            qs.clear = function clear() {\n                throughQs.delete();\n            };\n\n            /**\n             * Removes references to all passed OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n             * IDs 1 and 2 to no longer be referenced by the first book.\n             *\n             * @return undefined\n             */\n            qs.remove = function remove(...entities) {\n                const idsToRemove = new Set(entities.map(normalizeEntity));\n\n                const entitiesToDelete = throughQs.filter(through =>\n                    idsToRemove.has(through[otherReferencingField])\n                );\n\n                if (entitiesToDelete.count() !== idsToRemove.size) {\n                    // Tried deleting non-existing entities.\n                    const entitiesToDeleteIds = entitiesToDelete\n                        .toRefArray()\n                        .map(through => through[otherReferencingField]);\n\n                    const unexistingIds = [...idsToRemove].filter(\n                        id => !entitiesToDeleteIds.includes(id)\n                    );\n\n                    throw new Error(\n                        `Tried to delete non-existing ${OtherModel.modelName} id(s) ${unexistingIds} from the ${ThisModel.modelName} instance with id ${thisId}`\n                    );\n                }\n\n                entitiesToDelete.delete();\n            };\n\n            return qs;\n        },\n\n        set() {\n            throw new Error(\n                \"Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.\"\n            );\n        },\n    };\n}\n\nexport {\n    attrDescriptor,\n    forwardsManyToOneDescriptor,\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n    backwardsManyToOneDescriptor,\n    manyToManyDescriptor,\n};\n","import Field from \"./Field\";\n\nimport { attrDescriptor } from \"../descriptors\";\n\n/**\n * @memberof module:fields\n */\nexport class Attribute extends Field {\n    constructor(opts) {\n        super();\n        this.opts = opts || {};\n\n        if (this.opts.hasOwnProperty(\"getDefault\")) {\n            this.getDefault = this.opts.getDefault;\n        }\n    }\n\n    createForwardsDescriptor(fieldName, model) {\n        return attrDescriptor(fieldName);\n    }\n}\n\nexport default Attribute;\n","/* eslint-disable max-classes-per-file */\nimport Field from \"./Field\";\nimport DefaultFieldInstaller from \"./DefaultFieldInstaller\";\n\nimport { reverseFieldName, normalizeModelReference } from \"../utils\";\n\n/**\n * @private\n * @memberof module:fields\n */\nexport class RelationalField extends Field {\n    constructor(...args) {\n        super();\n        if (args.length === 1 && typeof args[0] === \"object\") {\n            const opts = args[0];\n            this.toModelName = normalizeModelReference(opts.to);\n            this.relatedName = opts.relatedName;\n            this.through = normalizeModelReference(opts.through);\n            this.throughFields = opts.throughFields;\n            this.as = opts.as;\n        } else {\n            [this.toModelName, this.relatedName] = [\n                normalizeModelReference(args[0]),\n                args[1],\n            ];\n        }\n    }\n\n    getBackwardsFieldName(model) {\n        return this.relatedName || reverseFieldName(model.modelName);\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField(model.modelName, fieldName);\n    }\n\n    get installsBackwardsVirtualField() {\n        return true;\n    }\n\n    get installsBackwardsDescriptor() {\n        return true;\n    }\n\n    references(model) {\n        return this.toModelName === model.modelName;\n    }\n\n    get installerClass() {\n        return class AliasedForwardsDescriptorInstaller extends DefaultFieldInstaller {\n            installForwardsDescriptor() {\n                Object.defineProperty(\n                    this.model.prototype,\n                    this.field.as || this.fieldName, // use supplied name if possible\n                    this.field.createForwardsDescriptor(\n                        this.fieldName,\n                        this.model,\n                        this.toModel,\n                        this.throughModel\n                    )\n                );\n            }\n        };\n    }\n}\n\nexport default RelationalField;\n","import RelationalField from \"./RelationalField\";\n\nimport {\n    forwardsManyToOneDescriptor,\n    backwardsManyToOneDescriptor,\n} from \"../descriptors\";\n\n/**\n * @memberof module:fields\n */\nexport class ForeignKey extends RelationalField {\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsManyToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsManyToOneDescriptor(fieldName, model.modelName);\n    }\n\n    get index() {\n        return true;\n    }\n}\n\nexport default ForeignKey;\n","import RelationalField from \"./RelationalField\";\n\nimport { manyToManyDescriptor } from \"../descriptors\";\n\nimport { m2mName, m2mToFieldName, m2mFromFieldName } from \"../utils\";\n\n/**\n * @memberof module:fields\n */\nexport class ManyToMany extends RelationalField {\n    getDefault() {\n        return [];\n    }\n\n    getThroughModelName(fieldName, model) {\n        return this.through || m2mName(model.modelName, fieldName);\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            false\n        );\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            true\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: model.modelName,\n            relatedName: fieldName,\n            through: throughModel.modelName,\n            throughFields: this.getThroughFields(\n                fieldName,\n                model,\n                toModel,\n                throughModel\n            ),\n        });\n    }\n\n    createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: toModel.modelName,\n            relatedName: fieldName,\n            through: this.through,\n            throughFields: this.getThroughFields(\n                fieldName,\n                model,\n                toModel,\n                throughModel\n            ),\n            as: this.as,\n        });\n    }\n\n    get installsForwardsVirtualField() {\n        return true;\n    }\n\n    getThroughFields(fieldName, model, toModel, throughModel) {\n        if (this.throughFields) {\n            const [fieldAName, fieldBName] = this.throughFields;\n            const fieldA = throughModel.fields[fieldAName];\n            return {\n                to: fieldA.references(toModel) ? fieldAName : fieldBName,\n                from: fieldA.references(toModel) ? fieldBName : fieldAName,\n            };\n        }\n\n        if (model.modelName === toModel.modelName) {\n            /**\n             * we have no way of determining the relationship's\n             * direction here, so we need to assume that the user\n             * did not use a custom through model\n             * see ORM#registerManyToManyModelsFor\n             */\n            return {\n                to: m2mToFieldName(toModel.modelName),\n                from: m2mFromFieldName(model.modelName),\n            };\n        }\n\n        /**\n         * determine which field references which model\n         * and infer the directions from that\n         */\n        const throughModelFieldReferencing = otherModel =>\n            Object.keys(throughModel.fields).find(someFieldName =>\n                throughModel.fields[someFieldName].references(otherModel)\n            );\n\n        return {\n            to: throughModelFieldReferencing(toModel),\n            from: throughModelFieldReferencing(model),\n        };\n    }\n}\n\nexport default ManyToMany;\n","import RelationalField from \"./RelationalField\";\n\nimport {\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n} from \"../descriptors\";\n\n/**\n * @memberof module:fields\n */\nexport class OneToOne extends RelationalField {\n    getBackwardsFieldName(model) {\n        return this.relatedName || model.modelName.toLowerCase();\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsOneToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsOneToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\nexport default OneToOne;\n","import Attribute from \"./Attribute\";\nimport ForeignKey from \"./ForeignKey\";\nimport ManyToMany from \"./ManyToMany\";\nimport OneToOne from \"./OneToOne\";\n\n/**\n * Contains the logic for how fields on {@link Model}s work\n * and which descriptors must be installed.\n *\n * If your goal is to define fields on a Model class,\n * please use the more convenient methods {@link attr},\n * {@link fk}, {@link many} and {@link oneToOne}.\n *\n * @module fields\n */\n\n/**\n * Defines a value attribute on the model.\n * Though not required, it is recommended to define this for each non-foreign key you wish to use.\n * Getters and setters need to be defined on each Model\n * instantiation for undeclared data fields, which is slower.\n * You can use the optional `getDefault` parameter to fill in unpassed values\n * to {@link Model.create}, such as for generating ID's with UUID:\n *\n * ```javascript\n * import getUUID from 'your-uuid-package-of-choice';\n *\n * fields = {\n *   id: attr({ getDefault: () => getUUID() }),\n *   title: attr(),\n * }\n * ```\n *\n * @param  {Object} [opts]\n * @param {Function} [opts.getDefault] - If you give a function here, its return\n *                                       value from calling with zero arguments will\n *                                       be used as the value when creating a new Model\n *                                       instance with {@link Model#create} if the field\n *                                       value is not passed.\n * @return {Attribute}\n */\nfunction attr(opts) {\n    return new Attribute(opts);\n}\n\n/**\n * Defines a foreign key on a model, which points\n * to a single entity on another model.\n *\n * You can pass arguments as either a single object,\n * or two arguments.\n *\n * If you pass two arguments, the first one is the name\n * of the Model the foreign key is pointing to, and\n * the second one is an optional related name, which will\n * be used to access the Model the foreign key\n * is being defined from, from the target Model.\n *\n * If the related name is not passed, it will be set as\n * `${toModelName}Set`.\n *\n * If you pass an object to `fk`, it has to be in the form\n *\n * ```javascript\n * fields = {\n *   author: fk({ to: 'Author', relatedName: 'books' })\n * }\n * ```\n *\n * Which is equal to\n *\n * ```javascript\n * fields = {\n *   author: fk('Author', 'books'),\n * }\n * ```\n *\n * @param {string|Class<Model>|Object} options - The target Model class, its `modelName`\n *                                               attribute or an options object that\n *                                               contains either as the `to` key.\n * @param {string|Class<Model>} options.to - The target Model class or its `modelName` attribute.\n * @param {string} [options.as] - Name for the new accessor defined for this field. If you don't\n *                                supply this, the key that this field is defined under will be\n *                                overridden.\n * @param {string} [options.relatedName] - The property name that will be used to access\n *                                         a QuerySet for all source models that reference\n *                                         the respective target Model's instance.\n * @param {string} [relatedName] - If you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet for all source models that reference\n *                                 the respective target Model's instance.\n * @return {ForeignKey}\n */\nfunction fk(...args) {\n    return new ForeignKey(...args);\n}\n\n/**\n * Defines a many-to-many relationship between\n * this (source) and another (target) model.\n *\n * The relationship is modeled with an extra model called the through model.\n * The through model has foreign keys to both the source and target models.\n *\n * You can define your own through model if you want to associate more information\n * to the relationship. A custom through model must have at least two foreign keys,\n * one pointing to the source Model, and one pointing to the target Model.\n *\n * Like `fk`, this function accepts one or two string arguments specifying the other\n * Model and the related name, or a single object argument that allows you to pass\n * a custom through model.\n *\n * If you have more than one foreign key pointing to a source or target Model in the\n * through Model, you must pass the option `throughFields`, which is an array of two\n * strings, where the strings are the field names that identify the foreign keys to\n * be used for the many-to-many relationship. Redux-ORM will figure out which field name\n * points to which model by checking the \"through model\" definition.\n *\n * ```javascript\n * class Authorship extends Model {}\n * Authorship.modelName = 'Authorship';\n * Authorship.fields = {\n *   author: fk('Author', 'authorships'),\n *   book: fk('Book', 'authorships'),\n * };\n *\n * class Author extends Model {}\n * Author.modelName = 'Author';\n * Author.fields = {\n *   books: many({\n *     to: 'Book',\n *     relatedName: 'authors',\n *     through: 'Authorship',\n *\n *     // here this is optional: Redux-ORM can figure\n *     // out the through fields itself since the two\n *     // foreign key fields point to different Models\n *     throughFields: ['author', 'book'],\n *   })\n * };\n *\n * class Book extends Model {}\n * Book.modelName = 'Book';\n * ```\n *\n * You should only define the many-to-many relationship on one side. In the\n * above case of Authors to Books through Authorships, the relationship is\n * defined only on the Author model.\n *\n * @param {string|Class<Model>|Object} options - The target Model class, its `modelName`\n *                                               attribute or an options object that\n *                                               contains either as the `to` key.\n * @param {string|Class<Model>} options.to - The target Model class or its `modelName` attribute.\n * @param {string} [options.as] - Name for the new accessor defined for this field. If you don't\n *                                supply this, the key that this field is defined under will be\n *                                overridden.\n * @param {string|Class<Model>} [options.through] - The through Model class or its `modelName`\n *                                                  attribute. It must declare at least one\n *                                                  foreign key to both source and target models.\n *                                                  If not supplied, Redux-ORM will generate one.\n * @param {string[]} [options.throughFields] - Must be supplied only when a custom through\n *                                             Model has more than one foreign key pointing to\n *                                             either the source or target mode. In this case\n *                                             Redux-ORM can't figure out the correct fields for\n *                                             you, you must provide them. The supplied array should\n *                                             have two elements that are the field names for the\n *                                             through fields you want to declare the many-to-many\n *                                             relationship with. The order doesn't matter;\n *                                             Redux-ORM will figure out which field points to\n *                                             the source Model and which to the target Model.\n * @param {string} [options.relatedName] - The attribute used to access a QuerySet for all\n *                                         source models that reference the respective target\n *                                         Model's instance.\n * @param {string} [relatedName] - If you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet for all source models that reference\n *                                 the respective target Model's instance.\n * @return {ManyToMany}\n */\nfunction many(...args) {\n    return new ManyToMany(...args);\n}\n\n/**\n * Defines a one-to-one relationship. In database terms, this is a foreign key with the\n * added restriction that only one entity can point to single target entity.\n *\n * The arguments are the same as with `fk`. If `relatedName` is not supplied,\n * the source model name in lowercase will be used. Note that with the one-to-one\n * relationship, the `relatedName` should be in singular, not plural.\n *\n *\n * @param {string|Class<Model>|Object} options - The target Model class, its `modelName`\n *                                               attribute or an options object that\n *                                               contains either as the `to` key.\n * @param {string|Class<Model>} options.to - The target Model class or its `modelName` attribute.\n * @param {string} [options.as] - Name for the new accessor defined for this field. If you don't\n *                                supply this, the key that this field is defined under will be\n *                                overridden.\n * @param {string} [options.relatedName] - The property name that will be used to access the source\n *                                         model instance referencing the target model instance.\n * @param {string} [relatedName] - The property name that will be used to access the source\n *                                 model instance referencing the target model instance\n * @return {OneToOne}\n */\nfunction oneToOne(...args) {\n    return new OneToOne(...args);\n}\n\nexport { fk, attr, many, oneToOne };\n","import Session from \"./Session\";\nimport QuerySet from \"./QuerySet\";\n\nimport { attr } from \"./fields\";\nimport ForeignKey from \"./fields/ForeignKey\";\nimport ManyToMany from \"./fields/ManyToMany\";\nimport OneToOne from \"./fields/OneToOne\";\n\nimport { CREATE, UPDATE, DELETE, FILTER } from \"./constants\";\nimport {\n    normalizeEntity,\n    arrayDiffActions,\n    objectShallowEquals,\n    warnDeprecated,\n    m2mName,\n} from \"./utils\";\n\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\nfunction getByIdQuery(modelInstance) {\n    const modelClass = modelInstance.getClass();\n    const { idAttribute, modelName } = modelClass;\n\n    return {\n        table: modelName,\n        clauses: [\n            {\n                type: FILTER,\n                payload: {\n                    [idAttribute]: modelInstance.getId(),\n                },\n            },\n        ],\n    };\n}\n\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\nconst Model = class Model {\n    /**\n     * Creates a Model instance from it's properties.\n     * Don't use this to create a new record; Use the static method {@link Model#create}.\n     * @param  {Object} props - the properties to instantiate with\n     */\n    constructor(props) {\n        this._initFields(props);\n    }\n\n    _initFields(props) {\n        const propsObj = Object(props);\n        this._fields = { ...propsObj };\n\n        Object.keys(propsObj).forEach(fieldName => {\n            // In this case, we got a prop that wasn't defined as a field.\n            // Assuming it's an arbitrary data field, making an instance-specific\n            // descriptor for it.\n            // Using the in operator as the property could be defined anywhere\n            // on the prototype chain.\n            if (!(fieldName in this)) {\n                Object.defineProperty(this, fieldName, {\n                    get: () => this._fields[fieldName],\n                    set: value => this.set(fieldName, value),\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n\n    static toString() {\n        return `ModelClass: ${this.modelName}`;\n    }\n\n    /**\n     * Returns the options object passed to the database for the table that represents\n     * this Model class.\n     *\n     * Returns an empty object by default, which means the database\n     * will use default options. You can either override this function to return the options\n     * you want to use, or assign the options object as a static property of the same name to the\n     * Model class.\n     *\n     * @return {Object} the options object passed to the database for the table\n     *                  representing this Model class.\n     */\n    static options() {\n        return {};\n    }\n\n    /**\n     * Manually mark individual instances as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<*>} ids - Array of primary key values\n     * @return {undefined}\n     */\n    static markAccessed(ids) {\n        if (typeof this._session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to mark rows of the ${this.modelName} model as accessed without a session. `,\n                    \"Create a session using `session = orm.session()` and call \",\n                    `\\`session[\"${this.modelName}\"].markAccessed\\` instead.`,\n                ].join(\"\")\n            );\n        }\n        this.session.markAccessed(this.modelName, ids);\n    }\n\n    /**\n     * Manually mark this model's table as scanned.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @return {undefined}\n     */\n    static markFullTableScanned() {\n        if (typeof this._session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to mark the ${this.modelName} model as full table scanned without a session. `,\n                    \"Create a session using `session = orm.session()` and call \",\n                    `\\`session[\"${this.modelName}\"].markFullTableScanned\\` instead.`,\n                ].join(\"\")\n            );\n        }\n        this.session.markFullTableScanned(this.modelName);\n    }\n\n    /**\n     * Manually mark indexes as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<Array.<*,*>>} indexes - Array of column-value pairs\n     * @return {undefined}\n     */\n    static markAccessedIndexes(indexes) {\n        if (typeof this._session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to mark indexes for the ${this.modelName} model as accessed without a session. `,\n                    \"Create a session using `session = orm.session()` and call \",\n                    `\\`session[\"${this.modelName}\"].markAccessedIndexes\\` instead.`,\n                ].join(\"\")\n            );\n        }\n        this.session.markAccessedIndexes(\n            indexes.map(([attribute, value]) => [\n                this.modelName,\n                attribute,\n                value,\n            ])\n        );\n    }\n\n    /**\n     * Returns the id attribute of this {@link Model}.\n     *\n     * @return {string} The id attribute of this {@link Model}.\n     */\n    static get idAttribute() {\n        if (typeof this._session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to get the ${this.modelName} model's id attribute without a session. `,\n                    \"Create a session using `session = orm.session()` and access \",\n                    `\\`session[\"${this.modelName}\"].idAttribute\\` instead.`,\n                ].join(\"\")\n            );\n        }\n        return this.session.db.describe(this.modelName).idAttribute;\n    }\n\n    /**\n     * Connect the model class to a {@link Session}.\n     *\n     * @private\n     * @param  {Session} session - The session to connect to.\n     */\n    static connect(session) {\n        if (!(session instanceof Session)) {\n            throw new Error(\n                \"A model can only be connected to instances of Session.\"\n            );\n        }\n        this._session = session;\n    }\n\n    /**\n     * Get the current {@link Session} instance.\n     *\n     * @private\n     * @return {Session} The current {@link Session} instance.\n     */\n    static get session() {\n        return this._session;\n    }\n\n    /**\n     * Returns an instance of the model's `querySetClass` field.\n     * By default, this will be an empty {@link QuerySet}.\n     *\n     * @return {Object} An instance of the model's `querySetClass`.\n     */\n    static getQuerySet() {\n        const { querySetClass: QuerySetClass } = this;\n        return new QuerySetClass(this);\n    }\n\n    /**\n     * @return {undefined}\n     */\n    static invalidateClassCache() {\n        this.isSetUp = undefined;\n        this.virtualFields = {};\n    }\n\n    /**\n     * @see {@link Model.getQuerySet}\n     */\n    static get query() {\n        return this.getQuerySet();\n    }\n\n    /**\n     * Returns parameters to be passed to {@link Table} instance.\n     *\n     * @private\n     */\n    static tableOptions() {\n        if (typeof this.backend === \"function\") {\n            warnDeprecated(\n                \"`Model.backend` has been deprecated. Please rename to `.options`.\"\n            );\n            return this.backend();\n        }\n        if (this.backend) {\n            warnDeprecated(\n                \"`Model.backend` has been deprecated. Please rename to `.options`.\"\n            );\n            return this.backend;\n        }\n        if (typeof this.options === \"function\") {\n            return this.options();\n        }\n        return this.options;\n    }\n\n    /**\n     * Creates a new record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {Object} userProps - the new {@link Model}'s properties.\n     * @return {Model} a new {@link Model} instance.\n     */\n    static create(userProps) {\n        if (typeof this._session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to create a ${this.modelName} model instance without a session. `,\n                    \"Create a session using `session = orm.session()` and call \",\n                    `\\`session[\"${this.modelName}\"].create\\` instead.`,\n                ].join(\"\")\n            );\n        }\n        const props = { ...userProps };\n\n        const m2mRelations = {};\n\n        const declaredFieldNames = Object.keys(this.fields);\n        const declaredVirtualFieldNames = Object.keys(this.virtualFields);\n\n        declaredFieldNames.forEach(key => {\n            const field = this.fields[key];\n            const valuePassed = userProps.hasOwnProperty(key);\n            if (!(field instanceof ManyToMany)) {\n                if (valuePassed) {\n                    const value = userProps[key];\n                    props[key] = normalizeEntity(value);\n                } else if (field.getDefault) {\n                    props[key] = field.getDefault();\n                }\n            } else if (valuePassed) {\n                // Save for later processing\n                m2mRelations[key] = userProps[key];\n\n                if (!field.as) {\n                    /**\n                     * The relationship does not have an accessor\n                     * Discard the value from props as the field will be populated later with instances\n                     * from the target models when refreshing the M2M relations.\n                     * If the relationship does have an accessor (`as`) field then we do want to keep this\n                     * original value in the props to expose the raw list of IDs from the instance.\n                     */\n                    delete props[key];\n                }\n            }\n        });\n\n        // add backward many-many if required\n        declaredVirtualFieldNames.forEach(key => {\n            if (!m2mRelations.hasOwnProperty(key)) {\n                const field = this.virtualFields[key];\n                if (\n                    userProps.hasOwnProperty(key) &&\n                    field instanceof ManyToMany\n                ) {\n                    // If a value is supplied for a ManyToMany field,\n                    // discard them from props and save for later processing.\n                    m2mRelations[key] = userProps[key];\n                    delete props[key];\n                }\n            }\n        });\n\n        const newEntry = this.session.applyUpdate({\n            action: CREATE,\n            table: this.modelName,\n            payload: props,\n        });\n\n        const ThisModel = this;\n        const instance = new ThisModel(newEntry);\n        instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n        return instance;\n    }\n\n    /**\n     * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {Object} userProps - the required {@link Model}'s properties.\n     * @return {Model} a {@link Model} instance.\n     */\n    static upsert(userProps) {\n        if (typeof this.session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to upsert a ${this.modelName} model instance without a session. `,\n                    \"Create a session using `session = orm.session()` and call \",\n                    `\\`session[\"${this.modelName}\"].upsert\\` instead.`,\n                ].join(\"\")\n            );\n        }\n\n        const { idAttribute } = this;\n        if (userProps.hasOwnProperty(idAttribute)) {\n            const id = userProps[idAttribute];\n            if (this.idExists(id)) {\n                const model = this.withId(id);\n                model.update(userProps);\n                return model;\n            }\n        }\n\n        return this.create(userProps);\n    }\n\n    /**\n     * Returns a {@link Model} instance for the object with id `id`.\n     * Returns `null` if the model has no instance with id `id`.\n     *\n     * You can use {@link Model#idExists} to check for existence instead.\n     *\n     * @param  {*} id - the `id` of the object to get\n     * @throws If object with id `id` doesn't exist\n     * @return {Model|null} {@link Model} instance with id `id`\n     */\n    static withId(id) {\n        return this.get({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     *\n     * @since 0.11.0\n     */\n    static idExists(id) {\n        return this.exists({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the given props exists in the state.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     */\n    static exists(lookupObj) {\n        if (typeof this.session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to check if a ${this.modelName} model instance exists without a session. `,\n                    \"Create a session using `session = orm.session()` and call \",\n                    `\\`session[\"${this.modelName}\"].exists\\` instead.`,\n                ].join(\"\")\n            );\n        }\n\n        return Boolean(this._findDatabaseRows(lookupObj).length);\n    }\n\n    /**\n     * Gets the {@link Model} instance that matches properties in `lookupObj`.\n     * Throws an error if {@link Model} if multiple records match\n     * the properties.\n     *\n     * @param  {Object} lookupObj - the properties used to match a single entity.\n     * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n     * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n     */\n    static get(lookupObj) {\n        const ThisModel = this;\n\n        const rows = this._findDatabaseRows(lookupObj);\n        if (rows.length === 0) {\n            return null;\n        }\n        if (rows.length > 1) {\n            throw new Error(\n                `Expected to find a single row in \\`${this.modelName}.get\\`. Found ${rows.length}.`\n            );\n        }\n\n        return new ThisModel(rows[0]);\n    }\n\n    /**\n     * Gets the {@link Model} class or subclass constructor (the class that\n     * instantiated this instance).\n     *\n     * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n     *                 this instance.\n     */\n    getClass() {\n        return this.constructor;\n    }\n\n    /**\n     * Gets the id value of the current instance by looking up the id attribute.\n     * @return {*} The id value of the current instance.\n     */\n    getId() {\n        return this._fields[this.getClass().idAttribute];\n    }\n\n    /**\n     * Returns a reference to the plain JS object in the store.\n     * It contains all the properties that you pass when creating the model,\n     * except for primary keys of many-to-many relationships with a custom accessor.\n     *\n     * Make sure never to mutate this.\n     *\n     * @return {Object} a reference to the plain JS object in the store\n     */\n    get ref() {\n        const ThisModel = this.getClass();\n\n        // eslint-disable-next-line no-underscore-dangle\n        return ThisModel._findDatabaseRows({\n            [ThisModel.idAttribute]: this.getId(),\n        })[0];\n    }\n\n    /**\n     * Finds all rows in this model's table that match the given `lookupObj`.\n     * If no `lookupObj` is passed, all rows in the model's table will be returned.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     * @private\n     */\n    static _findDatabaseRows(lookupObj) {\n        const querySpec = {\n            table: this.modelName,\n        };\n        if (lookupObj) {\n            querySpec.clauses = [\n                {\n                    type: FILTER,\n                    payload: lookupObj,\n                },\n            ];\n        }\n        return this.session.query(querySpec).rows;\n    }\n\n    /**\n     * Returns a string representation of the {@link Model} instance.\n     *\n     * @return {string} A string representation of this {@link Model} instance.\n     */\n    toString() {\n        const ThisModel = this.getClass();\n        const className = ThisModel.modelName;\n        const fieldNames = Object.keys(ThisModel.fields);\n        const fields = fieldNames\n            .map(fieldName => {\n                const field = ThisModel.fields[fieldName];\n                if (field instanceof ManyToMany) {\n                    const ids = this[fieldName]\n                        .toModelArray()\n                        .map(model => model.getId());\n                    return `${fieldName}: [${ids.join(\", \")}]`;\n                }\n                const val = this._fields[fieldName];\n                return `${fieldName}: ${val}`;\n            })\n            .join(\", \");\n        return `${className}: {${fields}}`;\n    }\n\n    /**\n     * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n     * Equality is determined by shallow comparing their attributes.\n     *\n     * This equality is used when you call {@link Model#update}.\n     * You can prevent model updates by returning `true` here.\n     * However, a model will always be updated if its relationships are changed.\n     *\n     * @param  {Model} otherModel - a {@link Model} instance to compare\n     * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n     */\n    equals(otherModel) {\n        // eslint-disable-next-line no-underscore-dangle\n        return objectShallowEquals(this._fields, otherModel._fields);\n    }\n\n    /**\n     * Updates a property name to given value for this {@link Model} instance.\n     * The values are immediately committed to the database.\n     *\n     * @param {string} propertyName - name of the property to set\n     * @param {*} value - value assigned to the property\n     * @return {undefined}\n     */\n    set(propertyName, value) {\n        this.update({\n            [propertyName]: value,\n        });\n    }\n\n    /**\n     * Assigns multiple fields and corresponding values to this {@link Model} instance.\n     * The updates are immediately committed to the database.\n     *\n     * @param  {Object} userMergeObj - an object that will be merged with this instance.\n     * @return {undefined}\n     */\n    update(userMergeObj) {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to update a ${ThisModel.modelName} model instance without a session. `,\n                    \"You cannot call `.update` on an instance that you did not receive from the database.\",\n                ].join(\"\")\n            );\n        }\n\n        const mergeObj = { ...userMergeObj };\n\n        const { fields, virtualFields } = ThisModel;\n\n        const m2mRelations = {};\n\n        // If an array of entities or id's is supplied for a\n        // many-to-many related field, clear the old relations\n        // and add the new ones.\n        // eslint-disable-next-line guard-for-in, no-restricted-syntax\n        for (const mergeKey in mergeObj) {\n            const isRealField = fields.hasOwnProperty(mergeKey);\n\n            if (isRealField) {\n                const field = fields[mergeKey];\n\n                if (field instanceof ForeignKey || field instanceof OneToOne) {\n                    // update one-one/fk relations\n                    mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n                } else if (field instanceof ManyToMany) {\n                    // field is forward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n\n                    if (!field.as) {\n                        /**\n                         * The relationship does not have an accessor\n                         * Discard the value from props as the field will be populated later with instances\n                         * from the target models when refreshing the M2M relations.\n                         * If the relationship does have an accessor (`as`) field then we do want to keep this\n                         * original value in the props to expose the raw list of IDs from the instance.\n                         */\n                        delete mergeObj[mergeKey];\n                    }\n                }\n            } else if (virtualFields.hasOwnProperty(mergeKey)) {\n                const field = virtualFields[mergeKey];\n                if (field instanceof ManyToMany) {\n                    // field is backward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n                    delete mergeObj[mergeKey];\n                }\n            }\n        }\n\n        const mergedFields = {\n            ...this._fields,\n            ...mergeObj,\n        };\n\n        const updatedModel = new ThisModel(mergedFields);\n        // only update fields if they have changed (referentially)\n        if (!this.equals(updatedModel)) {\n            this._initFields(mergedFields);\n            ThisModel.session.applyUpdate({\n                action: UPDATE,\n                query: getByIdQuery(this),\n                payload: mergeObj,\n            });\n        }\n\n        // update virtual fields\n        this._refreshMany2Many(m2mRelations);\n    }\n\n    /**\n     * Updates {@link Model} instance attributes to reflect the\n     * database state in the current session.\n     * @return {undefined}\n     */\n    refreshFromState() {\n        this._initFields(this.ref);\n    }\n\n    /**\n     * Deletes the record for this {@link Model} instance.\n     * You'll still be able to access fields and values on the instance.\n     *\n     * @return {undefined}\n     */\n    delete() {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === \"undefined\") {\n            throw new Error(\n                [\n                    `Tried to delete a ${ThisModel.modelName} model instance without a session. `,\n                    \"You cannot call `.delete` on an instance that you did not receive from the database.\",\n                ].join(\"\")\n            );\n        }\n\n        this._onDelete();\n        ThisModel.session.applyUpdate({\n            action: DELETE,\n            query: getByIdQuery(this),\n        });\n    }\n\n    /**\n     * Update many-many relations for model.\n     * @param relations\n     * @return undefined\n     * @private\n     */\n    _refreshMany2Many(relations) {\n        const ThisModel = this.getClass();\n        const { fields, virtualFields, modelName } = ThisModel;\n\n        Object.keys(relations).forEach(name => {\n            const reverse = !fields.hasOwnProperty(name);\n            const field = virtualFields[name];\n            const values = relations[name];\n\n            if (!Array.isArray(values)) {\n                throw new TypeError(\n                    `Failed to resolve many-to-many relationship: ${modelName}[${name}] must be an array (passed: ${values})`\n                );\n            }\n\n            const normalizedNewIds = values.map(normalizeEntity);\n            const uniqueIds = [...new Set(normalizedNewIds)];\n\n            if (normalizedNewIds.length !== uniqueIds.length) {\n                throw new Error(\n                    `Found duplicate id(s) when passing \"${normalizedNewIds}\" to ${ThisModel.modelName}.${name} value`\n                );\n            }\n\n            const throughModelName =\n                field.through || m2mName(ThisModel.modelName, name);\n            const ThroughModel = ThisModel.session[throughModelName];\n\n            let fromField;\n            let toField;\n\n            if (!reverse) {\n                ({ from: fromField, to: toField } = field.throughFields);\n            } else {\n                ({ from: toField, to: fromField } = field.throughFields);\n            }\n\n            const currentIds = ThroughModel.filter(\n                through => through[fromField] === this[ThisModel.idAttribute]\n            )\n                .toRefArray()\n                .map(ref => ref[toField]);\n\n            const diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n            if (diffActions) {\n                const { delete: idsToDelete, add: idsToAdd } = diffActions;\n                if (idsToDelete.length > 0) {\n                    this[field.as || name].remove(...idsToDelete);\n                }\n\n                if (idsToAdd.length > 0) {\n                    this[field.as || name].add(...idsToAdd);\n                }\n            }\n        });\n    }\n\n    /**\n     * @return {undefined}\n     * @private\n     */\n    _onDelete() {\n        const { virtualFields } = this.getClass();\n        // eslint-disable-next-line guard-for-in, no-restricted-syntax\n        for (const key in virtualFields) {\n            const field = virtualFields[key];\n            if (field instanceof ManyToMany) {\n                // Delete any many-to-many rows the entity is included in.\n                this[key].clear();\n            } else if (field instanceof ForeignKey) {\n                const relatedQs = this[key];\n                if (relatedQs.exists()) {\n                    relatedQs.update({ [field.relatedName]: null });\n                }\n            } else if (field instanceof OneToOne) {\n                // Set null to any foreign keys or one to ones pointed to\n                // this instance.\n                if (this[key] !== null) {\n                    this[key][field.relatedName] = null;\n                }\n            }\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     * @deprecated Please use {@link Model.idExists} instead.\n     */\n    static hasId(id) {\n        console.warn(\n            \"`Model.hasId` has been deprecated. Please use `Model.idExists` instead.\"\n        );\n        return this.idExists(id);\n    }\n\n    /**\n     * @deprecated See the 0.9 migration guide on the GitHub repo.\n     * @throws {Error} Due to deprecation.\n     */\n    getNextState() {\n        throw new Error(\n            \"`Model.prototype.getNextState` has been removed. See the 0.9 \" +\n                \"migration guide on the GitHub repo.\"\n        );\n    }\n};\n\nModel.fields = {\n    id: attr(),\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\n\nexport default Model;\n","import ops from \"immutable-ops\";\nimport filter from \"lodash/filter\";\nimport orderBy from \"lodash/orderBy\";\nimport reject from \"lodash/reject\";\nimport sortBy from \"lodash/sortBy\";\n\nimport { EXCLUDE, FILTER, ORDER_BY } from \"../constants\";\nimport { clauseFiltersByAttribute, clauseReducesResultSetSize } from \"../utils\";\n\nconst DEFAULT_TABLE_OPTIONS = {\n    idAttribute: \"id\",\n    arrName: \"items\",\n    mapName: \"itemsById\",\n    fields: {},\n};\n\n/**\n * @private\n * @param {*} _currMax - the current max id\n * @param {*} userPassedId - the new id passed to the create action\n *\n * Both may be undefined. The current max id in the case that this is the first Model\n * being created, and the new id if the id was not explicitly passed to the\n * database.\n *\n * @return {Array} the new max id and the id to use to create the new row\n *\n * If the id's are strings, the id must be passed explicitly every time.\n * In this case, the current max id will remain `NaN` due to `Math.max`, but that's fine.\n */\nfunction idSequencer(_currMax, userPassedId) {\n    let currMax = _currMax;\n    let newMax;\n    let newId;\n\n    if (currMax === undefined) {\n        currMax = -1;\n    }\n\n    if (userPassedId === undefined) {\n        newMax = currMax + 1;\n        newId = newMax;\n    } else {\n        newMax = Math.max(currMax + 1, userPassedId);\n        newId = userPassedId;\n    }\n\n    return [\n        newMax, // new max id\n        newId, // id to use for row creation\n    ];\n}\n\n/**\n * Adapt order directions array to @{lodash.orderBy} API.\n *\n * @private\n *\n * @param {Array<Boolean|'asc'|'desc'>} orders? - an array of optional order query directions as provided to {@Link {QuerySet.orderBy}}\n * @return {Array<'asc'|'desc'>|undefined} A normalized ordering array or undefined if none was provided.\n */\nfunction normalizeOrders(orders) {\n    if (orders === undefined) {\n        return undefined;\n    }\n    const convert = order => {\n        if ([\"desc\", false].includes(order)) {\n            return \"desc\";\n        }\n        return \"asc\";\n    };\n    return Array.isArray(orders) ? orders.map(convert) : convert(orders);\n}\n\n/**\n * Handles the underlying data structure for a {@link Model} class.\n * @private\n */\nexport class Table {\n    /**\n     * Creates a new {@link Table} instance.\n     * @param  {Object} userOpts - options to use.\n     * @param  {string} [userOpts.idAttribute=id] - the id attribute of the entity.\n     * @param  {string} [userOpts.arrName=items] - the state attribute where an array of\n     *                                             entity id's are stored\n     * @param  {string} [userOpts.mapName=itemsById] - the state attribute where the entity objects\n     *                                                 are stored in a id to entity object\n     *                                                 map.\n     * @param  {string} [userOpts.fields={}] - mapping of field key to {@link Field} object\n     */\n    constructor(userOpts) {\n        Object.assign(this, DEFAULT_TABLE_OPTIONS, userOpts);\n    }\n\n    /**\n     * Returns a reference to the object at index `id`\n     * in state `branch`.\n     *\n     * @param  {Object} branch - the state\n     * @param  {Number} id - the id of the object to get\n     * @return {Object|undefined} A reference to the raw object in the state or\n     *                            `undefined` if not found.\n     */\n    accessId(branch, id) {\n        return branch[this.mapName][id];\n    }\n\n    accessIds(branch, ids) {\n        const map = branch[this.mapName];\n        return ids.map(id => map[id]);\n    }\n\n    idExists(branch, id) {\n        return branch[this.mapName].hasOwnProperty(id);\n    }\n\n    accessIdList(branch) {\n        return branch[this.arrName];\n    }\n\n    accessList(branch) {\n        return this.accessIds(branch, this.accessIdList(branch));\n    }\n\n    getMaxId(branch) {\n        return this.getMeta(branch, \"maxId\");\n    }\n\n    setMaxId(tx, branch, newMaxId) {\n        return this.setMeta(tx, branch, \"maxId\", newMaxId);\n    }\n\n    nextId(id) {\n        return id + 1;\n    }\n\n    /**\n     * Returns the default state for the data structure.\n     * @return {Object} The default state for this {@link ORM} instance's data structure\n     */\n    getEmptyState() {\n        const pkIndex = {\n            [this.arrName]: [],\n            [this.mapName]: {},\n        };\n        const attrIndexes = Object.keys(this.fields)\n            .filter(attr => attr !== this.idAttribute)\n            .filter(attr => this.fields[attr].index)\n            .reduce(\n                (indexes, attr) => ({\n                    ...indexes,\n                    [attr]: {},\n                }),\n                {}\n            );\n        return {\n            ...pkIndex,\n            indexes: attrIndexes,\n            meta: {},\n        };\n    }\n\n    setMeta(tx, branch, key, value) {\n        const { batchToken, withMutations } = tx;\n        if (withMutations) {\n            const res = ops.mutable.setIn([\"meta\", key], value, branch);\n            return res;\n        }\n\n        return ops.batch.setIn(batchToken, [\"meta\", key], value, branch);\n    }\n\n    getMeta(branch, key) {\n        return branch.meta[key];\n    }\n\n    query(branch, clauses) {\n        if (clauses.length === 0) {\n            return this.accessList(branch);\n        }\n\n        const { idAttribute } = this;\n\n        const optimallyOrderedClauses = sortBy(clauses, clause => {\n            if (clauseFiltersByAttribute(clause, idAttribute)) {\n                return 1;\n            }\n\n            if (clauseReducesResultSetSize(clause)) {\n                return 2;\n            }\n\n            return 3;\n        });\n\n        const reducer = (rows, clause) => {\n            const { type, payload } = clause;\n            if (!rows) {\n                /**\n                 * First time this reducer is called during query.\n                 * This is where we apply query optimizations.\n                 */\n                if (clauseFiltersByAttribute(clause, idAttribute)) {\n                    /**\n                     * Payload specified a primary key. Use PK index\n                     * to look up the single row identified by the PK.\n                     */\n                    const id = payload[idAttribute];\n                    const remainingPayload = Object.keys(payload).reduce(\n                        (withoutPkAttr, filterAttr) => {\n                            if (filterAttr !== idAttribute) {\n                                withoutPkAttr[filterAttr] = payload[filterAttr];\n                            }\n                            return withoutPkAttr;\n                        },\n                        {}\n                    );\n                    const ids = this.idExists(branch, id) ? [id] : [];\n                    if (Object.keys(remainingPayload).length) {\n                        /**\n                         * Payload has additional, non-PK columns.\n                         * Filter accessed row by remaining payload (if one was found).\n                         */\n                        return reducer(this.accessIds(branch, ids), {\n                            ...clause,\n                            payload: remainingPayload,\n                        });\n                    }\n                    /**\n                     * No need to filter these rows any further.\n                     * The primary key value satisfies this clause's conditions.\n                     */\n                    return this.accessIds(branch, ids);\n                }\n                if (type === FILTER && typeof payload === \"object\") {\n                    const indexes = Object.entries(branch.indexes);\n                    const accessedIndexes = [];\n                    const indexAttrs = [];\n                    indexes.forEach(([attr, index]) => {\n                        if (clauseFiltersByAttribute(clause, attr)) {\n                            /**\n                             * Payload specified an indexed attribute. Use index\n                             * to potentially decrease amount of accessed rows.\n                             */\n                            if (index.hasOwnProperty(payload[attr])) {\n                                accessedIndexes.push(index[payload[attr]]);\n                                indexAttrs.push(attr);\n                            }\n                        }\n                    });\n                    /**\n                     * Calculate set of unique PK values corresponding to each\n                     * foreign key's attribute value. Then retrieve all those rows.\n                     */\n                    if (accessedIndexes.length) {\n                        const lastIndex = accessedIndexes.pop();\n                        const indexedIds = accessedIndexes.reduce(\n                            (result, index) => {\n                                const indexSet = new Set(index);\n                                return result.filter(\n                                    Set.prototype.has,\n                                    indexSet\n                                );\n                            },\n                            lastIndex\n                        );\n                        const remainingPayload = Object.keys(payload).reduce(\n                            (withoutIndexAttrs, filterAttr) => {\n                                if (!indexAttrs.includes(filterAttr)) {\n                                    withoutIndexAttrs[filterAttr] =\n                                        payload[filterAttr];\n                                }\n                                return withoutIndexAttrs;\n                            },\n                            {}\n                        );\n                        if (Object.keys(remainingPayload).length) {\n                            /**\n                             * Payload has additional, non-indexed columns.\n                             * Filter indexed rows by remaining payload (if any were found).\n                             */\n                            return reducer(this.accessIds(branch, indexedIds), {\n                                ...clause,\n                                payload: remainingPayload,\n                            });\n                        }\n                        /**\n                         * No need to filter these rows any further.\n                         * The used indexes satisfy this clause's conditions.\n                         */\n                        return this.accessIds(branch, indexedIds);\n                    }\n                }\n\n                // Give up optimization: Retrieve all rows (full table scan).\n                return reducer(this.accessList(branch), clause);\n            }\n\n            switch (type) {\n                case FILTER: {\n                    return filter(rows, payload);\n                }\n                case EXCLUDE: {\n                    return reject(rows, payload);\n                }\n                case ORDER_BY: {\n                    const [iteratees, orders] = payload;\n                    return orderBy(rows, iteratees, normalizeOrders(orders));\n                }\n                default:\n                    return rows;\n            }\n        };\n\n        return optimallyOrderedClauses.reduce(reducer, undefined);\n    }\n\n    /**\n     * Returns the data structure including a new object `entry`\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object} entry - the object to insert\n     * @return {Object} an object with two keys: `state` and `created`.\n     *                  `state` is the new table state and `created` is the\n     *                  row that was created.\n     */\n    insert(tx, branch, entry) {\n        const { batchToken, withMutations } = tx;\n\n        const hasId = entry.hasOwnProperty(this.idAttribute);\n\n        let workingState = branch;\n\n        // This will not affect string id's.\n        const [newMaxId, id] = idSequencer(\n            this.getMaxId(branch),\n            entry[this.idAttribute]\n        );\n        workingState = this.setMaxId(tx, branch, newMaxId);\n\n        const finalEntry = hasId\n            ? entry\n            : ops.batch.set(batchToken, this.idAttribute, id, entry);\n\n        const indexesToAppendTo = Object.keys(workingState.indexes)\n            .filter(\n                fkAttr => entry.hasOwnProperty(fkAttr) && entry[fkAttr] !== null\n            )\n            .map(fkAttr => [fkAttr, entry[fkAttr]]);\n\n        if (withMutations) {\n            ops.mutable.push(id, workingState[this.arrName]);\n            ops.mutable.set(id, finalEntry, workingState[this.mapName]);\n            // add id to indexes\n            indexesToAppendTo.forEach(([attr, value]) => {\n                const attrIndex = workingState.indexes[attr];\n                if (attrIndex.hasOwnProperty(value)) {\n                    ops.mutable.push(id, attrIndex[value]);\n                } else {\n                    ops.mutable.set(value, [id], attrIndex);\n                }\n            });\n            return {\n                state: workingState,\n                created: finalEntry,\n            };\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            indexesToAppendTo.reduce(\n                (indexMap, [attr, value]) => {\n                    indexMap[attr] = ops.batch.merge(\n                        batchToken,\n                        {\n                            [value]: ops.batch.push(\n                                batchToken,\n                                id,\n                                indexMap[attr][value] || []\n                            ),\n                        },\n                        indexMap[attr]\n                    );\n                    return indexMap;\n                },\n                { ...workingState.indexes }\n            ),\n            workingState.indexes\n        );\n\n        const nextState = ops.batch.merge(\n            batchToken,\n            {\n                [this.arrName]: ops.batch.push(\n                    batchToken,\n                    id,\n                    workingState[this.arrName]\n                ),\n                [this.mapName]: ops.batch.merge(\n                    batchToken,\n                    {\n                        [id]: finalEntry,\n                    },\n                    workingState[this.mapName]\n                ),\n                indexes: nextIndexes,\n            },\n            workingState\n        );\n\n        return {\n            state: nextState,\n            created: finalEntry,\n        };\n    }\n\n    /**\n     * Returns the data structure with objects where `rows`\n     * are merged with `mergeObj`.\n     *\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @param  {Object} mergeObj - The object to merge with each row.\n     * @return {Object}\n     */\n    update(tx, branch, rows, mergeObj) {\n        const { batchToken, withMutations } = tx;\n\n        const mergeObjInto = row => {\n            const merge = withMutations\n                ? ops.mutable.merge\n                : ops.batch.merge(batchToken);\n            return merge(mergeObj, row);\n        };\n\n        const set = withMutations ? ops.mutable.set : ops.batch.set(batchToken);\n\n        const indexedAttrs = Object.keys(branch.indexes).filter(attr =>\n            mergeObj.hasOwnProperty(attr)\n        );\n        const indexIdsToAdd = [];\n        const indexIdsToDelete = [];\n\n        const nextMap = rows.reduce((map, row) => {\n            const prevAttrValues = indexedAttrs.reduce(\n                (valueMap, attr) => ({\n                    ...valueMap,\n                    [attr]: row[attr],\n                }),\n                {}\n            );\n            const result = mergeObjInto(row);\n            const nextAttrValues = indexedAttrs.reduce(\n                (valueMap, attr) => ({\n                    ...valueMap,\n                    [attr]: result[attr],\n                }),\n                {}\n            );\n            const id = result[this.idAttribute];\n            const nextRow = set(id, result, map);\n            indexedAttrs.forEach(attr => {\n                const { [attr]: prevValue } = prevAttrValues;\n                const { [attr]: nextValue } = nextAttrValues;\n                if (prevValue === nextValue) {\n                    // attribute has not changed, no need to update any index\n                    return;\n                }\n                if (prevValue !== null) {\n                    // remove id from attribute's index for its old value\n                    indexIdsToDelete.push([attr, prevValue, id]);\n                }\n                if (nextValue !== null) {\n                    // add id to attribute's index for its new value\n                    indexIdsToAdd.push([attr, nextValue, id]);\n                }\n            });\n            return nextRow;\n        }, branch[this.mapName]);\n\n        let nextIndexes = branch.indexes;\n        if (withMutations) {\n            indexIdsToDelete.forEach(([attr, value, id]) => {\n                const arr = nextIndexes[attr][value];\n                const idx = arr.indexOf(id);\n                ops.mutable.splice(idx, 1, [], arr);\n            });\n            indexIdsToAdd.forEach(([attr, value, id]) => {\n                ops.mutable.push(id, nextIndexes[attr][value]);\n            });\n        } else {\n            if (indexIdsToAdd.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToAdd.reduce(\n                        (indexMap, [attr, value, id]) => {\n                            indexMap[attr] = ops.batch.merge(\n                                batchToken,\n                                {\n                                    [value]: ops.batch.push(\n                                        batchToken,\n                                        id,\n                                        indexMap[attr][value] || []\n                                    ),\n                                },\n                                indexMap[attr]\n                            );\n                            return indexMap;\n                        },\n                        { ...nextIndexes }\n                    ),\n                    nextIndexes\n                );\n            }\n            if (indexIdsToDelete.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToDelete.reduce(\n                        (indexMap, [attr, value, id]) => {\n                            indexMap[attr] = ops.batch.merge(\n                                batchToken,\n                                {\n                                    [value]: ops.batch.filter(\n                                        batchToken,\n                                        rowId => rowId !== id,\n                                        indexMap[attr][value]\n                                    ),\n                                },\n                                indexMap[attr]\n                            );\n                            return indexMap;\n                        },\n                        { ...nextIndexes }\n                    ),\n                    nextIndexes\n                );\n            }\n        }\n\n        return ops.batch.merge(\n            batchToken,\n            {\n                [this.mapName]: nextMap,\n                indexes: nextIndexes,\n            },\n            branch\n        );\n    }\n\n    /**\n     * Returns the data structure without rows `rows`.\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @return {Object} the data structure without ids in `idsToDelete`.\n     */\n    delete(tx, branch, rows) {\n        const { batchToken, withMutations } = tx;\n\n        const { arrName, mapName } = this;\n        const arr = branch[arrName];\n\n        const idsToDelete = rows.map(row => row[this.idAttribute]);\n        if (withMutations) {\n            idsToDelete.forEach(id => {\n                const idx = arr.indexOf(id);\n                ops.mutable.splice(idx, 1, [], arr);\n                ops.mutable.omit(id, branch[mapName]);\n            });\n            // delete ids from all indexes\n            Object.values(branch.indexes).forEach(attrIndex =>\n                Object.values(attrIndex).forEach(valueIndex =>\n                    idsToDelete.forEach(id => {\n                        const idx = valueIndex.indexOf(id);\n                        if (idx !== -1) {\n                            ops.mutable.splice(idx, 1, [], valueIndex);\n                        }\n                    })\n                )\n            );\n            return branch;\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            Object.entries(branch.indexes).reduce(\n                (indexMap, [attr, attrIndex]) => {\n                    indexMap[attr] = ops.batch.merge(\n                        batchToken,\n                        Object.entries(attrIndex).reduce(\n                            (attrIndexMap, [value, valueIndex]) => {\n                                attrIndexMap[value] = ops.batch.filter(\n                                    batchToken,\n                                    id => !idsToDelete.includes(id),\n                                    valueIndex\n                                );\n                                return attrIndexMap;\n                            },\n                            { ...indexMap[attr] }\n                        ),\n                        indexMap[attr]\n                    );\n                    return indexMap;\n                },\n                { ...branch.indexes }\n            ),\n            branch.indexes\n        );\n\n        return ops.batch.merge(\n            batchToken,\n            {\n                [arrName]: ops.batch.filter(\n                    batchToken,\n                    id => !idsToDelete.includes(id),\n                    branch[arrName]\n                ),\n                [mapName]: ops.batch.omit(\n                    batchToken,\n                    idsToDelete,\n                    branch[mapName]\n                ),\n                indexes: ops.batch.merge(\n                    batchToken,\n                    nextIndexes,\n                    branch.indexes\n                ),\n            },\n            branch\n        );\n    }\n}\n\nexport default Table;\n","import ops from \"immutable-ops\";\n\nimport { CREATE, UPDATE, DELETE, SUCCESS, STATE_FLAG } from \"../constants\";\n\nimport Table from \"./Table\";\n\nconst BASE_EMPTY_STATE = {};\nObject.defineProperty(BASE_EMPTY_STATE, STATE_FLAG, {\n    enumerable: true,\n    value: true,\n});\n\n/** @private */\nfunction replaceTableState(tableName, newTableState, tx, state) {\n    const { batchToken, withMutations } = tx;\n\n    if (withMutations) {\n        state[tableName] = newTableState;\n        return state;\n    }\n\n    return ops.batch.set(batchToken, tableName, newTableState, state);\n}\n\n/** @private */\nfunction query(tables, querySpec, state) {\n    const { table: tableName, clauses } = querySpec;\n    const table = tables[tableName];\n    const rows = table.query(state[tableName], clauses);\n    return {\n        rows,\n    };\n}\n\n/** @private */\nfunction update(tables, updateSpec, tx, state) {\n    const { action, payload } = updateSpec;\n\n    let tableName;\n    let nextTableState;\n    let resultPayload;\n\n    if (action === CREATE) {\n        ({ table: tableName } = updateSpec);\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n        const result = table.insert(tx, currTableState, payload);\n        nextTableState = result.state;\n        resultPayload = result.created;\n    } else {\n        const { query: querySpec } = updateSpec;\n        ({ table: tableName } = querySpec);\n        const { rows } = query(tables, querySpec, state);\n\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n\n        if (action === UPDATE) {\n            nextTableState = table.update(tx, currTableState, rows, payload);\n            // return updated rows\n            resultPayload = query(tables, querySpec, state).rows;\n        } else if (action === DELETE) {\n            nextTableState = table.delete(tx, currTableState, rows);\n            // return original rows that we just deleted\n            resultPayload = rows;\n        } else {\n            throw new Error(`Database received unknown update type: ${action}`);\n        }\n    }\n\n    const nextDBState = replaceTableState(tableName, nextTableState, tx, state);\n    return {\n        status: SUCCESS,\n        state: nextDBState,\n        payload: resultPayload,\n    };\n}\n\n/**\n * @memberof db\n * @param {Object} schemaSpec\n * @return Object database\n */\nexport function createDatabase(schemaSpec) {\n    const { tables: tableSpecs } = schemaSpec;\n    const tables = Object.entries(tableSpecs).reduce(\n        (map, [tableName, tableSpec]) => ({\n            ...map,\n            [tableName]: new Table(tableSpec),\n        }),\n        {}\n    );\n\n    const getEmptyState = () =>\n        Object.entries(tables).reduce(\n            (map, [tableName, table]) => ({\n                ...map,\n                [tableName]: table.getEmptyState(),\n            }),\n            BASE_EMPTY_STATE\n        );\n\n    return {\n        getEmptyState,\n        query: query.bind(null, tables),\n        update: update.bind(null, tables),\n        // Used to inspect the schema.\n        describe: tableName => tables[tableName],\n    };\n}\n\nexport default createDatabase;\n","import { ID_ARG_KEY_SELECTOR } from \"../constants\";\n\nexport default class SelectorSpec {\n    constructor({ parent, orm }) {\n        this._parent = parent;\n        this._orm = orm;\n        this.keySelector = ID_ARG_KEY_SELECTOR;\n    }\n\n    get cachePath() {\n        const basePath = this._parent ? this._parent.cachePath : [];\n        return [...basePath, this.key];\n    }\n\n    get orm() {\n        return this._orm;\n    }\n\n    get parent() {\n        return this._parent;\n    }\n}\n","import SelectorSpec from \"./SelectorSpec\";\n\nexport default class ModelBasedSelectorSpec extends SelectorSpec {\n    constructor({ model, ...other }) {\n        super(other);\n        this._model = model;\n    }\n\n    get resultFunc() {\n        return (session, idArg, ...other) => {\n            const { [this._model.modelName]: ModelClass } = session;\n            if (typeof idArg === \"undefined\") {\n                return ModelClass.all()\n                    .toModelArray()\n                    .map(instance =>\n                        this.valueForInstance(instance, session, ...other)\n                    );\n            }\n            if (Array.isArray(idArg)) {\n                return idArg.map(id =>\n                    this.valueForInstance(\n                        ModelClass.withId(id),\n                        session,\n                        ...other\n                    )\n                );\n            }\n            return this.valueForInstance(\n                ModelClass.withId(idArg),\n                session,\n                ...other\n            );\n        };\n    }\n\n    get model() {\n        return this._model;\n    }\n}\n","export default function idArgSelector(state, idArg) {\n    return idArg;\n}\n","import ModelBasedSelectorSpec from \"./ModelBasedSelectorSpec\";\nimport idArgSelector from \"./idArgSelector\";\n\nexport default class MapSelectorSpec extends ModelBasedSelectorSpec {\n    constructor({ field, selector, ...other }) {\n        super(other);\n        this._field = field;\n        this._selector = selector;\n    }\n\n    createResultFunc(parentSelector) {\n        const { idAttribute } = this._parent.toModel;\n        return (state, ...other) => {\n            /**\n             * The parent selector should return a ref array\n             * in case of a single ID being passed.\n             * Otherwise it should return an array of ref arrays.\n             */\n            const parentResult = parentSelector(state, ...other);\n            const idArg = idArgSelector(state, ...other);\n            const single = refArray => {\n                if (refArray === null) {\n                    // an intermediate field could not be resolved\n                    return null;\n                }\n                return refArray.map(ref =>\n                    this._selector(state, ref[idAttribute])\n                );\n            };\n            if (typeof idArg === \"undefined\" || Array.isArray(idArg)) {\n                return parentResult.map(single);\n            }\n            return single(parentResult);\n        };\n    }\n\n    get selector() {\n        return this._selector;\n    }\n\n    set selector(selector) {\n        this._selector = selector;\n    }\n\n    get key() {\n        return this._selector;\n    }\n}\n","import SelectorSpec from \"./SelectorSpec\";\nimport idArgSelector from \"./idArgSelector\";\n\nexport default class ModelSelectorSpec extends SelectorSpec {\n    constructor({ model, ...other }) {\n        super(other);\n        this._model = model;\n    }\n\n    get key() {\n        return this._model.modelName;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector];\n    }\n\n    get resultFunc() {\n        return ({ [this._model.modelName]: ModelClass }, idArg) => {\n            if (typeof idArg === \"undefined\") {\n                return ModelClass.all().toRefArray();\n            }\n            if (Array.isArray(idArg)) {\n                return idArg.map(id => {\n                    const instance = ModelClass.withId(id);\n                    return instance ? instance.ref : null;\n                });\n            }\n            const instance = ModelClass.withId(idArg);\n            return instance ? instance.ref : null;\n        };\n    }\n\n    get model() {\n        return this._model;\n    }\n}\n","import MapSelectorSpec from \"./MapSelectorSpec\";\nimport ModelSelectorSpec from \"./ModelSelectorSpec\";\nimport ModelBasedSelectorSpec from \"./ModelBasedSelectorSpec\";\nimport idArgSelector from \"./idArgSelector\";\n\nimport QuerySet from \"../QuerySet\";\nimport Model from \"../Model\";\n\nimport ForeignKey from \"../fields/ForeignKey\";\nimport ManyToMany from \"../fields/ManyToMany\";\n\nexport default class FieldSelectorSpec extends ModelBasedSelectorSpec {\n    constructor({ field, fieldModel, accessorName, isVirtual, ...other }) {\n        super(other);\n        this._field = field;\n        this._fieldModel = fieldModel;\n        this._accessorName = accessorName;\n        this._isVirtual = isVirtual;\n    }\n\n    get key() {\n        return this._accessorName;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector];\n    }\n\n    valueForInstance(instance, session) {\n        if (!instance) {\n            return null;\n        }\n        let value;\n        if (this._parent instanceof ModelSelectorSpec) {\n            /* orm.Model.field */\n            value = instance[this._accessorName];\n        } else {\n            /* orm.Model.field1.field2..fieldN.field */\n            const { [this._parent.toModelName]: ParentToModel } = session;\n            const parentRef = this._parent.valueForInstance(instance, session);\n            const parentInstance = parentRef\n                ? new ParentToModel(parentRef)\n                : null;\n            value = parentInstance ? parentInstance[this._accessorName] : null;\n        }\n        if (value instanceof Model) {\n            return value.ref;\n        }\n        if (value instanceof QuerySet) {\n            return value.toRefArray();\n        }\n        return value;\n    }\n\n    map(selector) {\n        if (selector instanceof ModelSelectorSpec) {\n            if (this.toModelName === selector.model.modelName) {\n                throw new Error(\n                    `Cannot select models in a \\`map()\\` call. If you just want the \\`${this._accessorName}\\` as a ref array then you can simply drop the \\`map()\\`. Otherwise make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`\n                );\n            } else {\n                throw new Error(\n                    `Cannot select \\`${selector.model.modelName}\\` models in this \\`map()\\` call. Make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`\n                );\n            }\n        } else if (\n            selector instanceof FieldSelectorSpec ||\n            selector instanceof MapSelectorSpec\n        ) {\n            if (this.toModelName !== selector.model.modelName) {\n                throw new Error(\n                    `Cannot select fields of the \\`${selector.model.modelName}\\` model in this \\`map()\\` call. Make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`\n                );\n            }\n        } else if (\n            !selector ||\n            typeof selector !== \"function\" ||\n            !selector.recomputations\n        ) {\n            throw new Error(\n                `\\`map()\\` requires a selector as an input. Received: ${JSON.stringify(\n                    selector\n                )} of type ${typeof selector}`\n            );\n        }\n        if (\n            !(this._field instanceof ForeignKey) &&\n            !(this._field instanceof ManyToMany)\n        ) {\n            throw new Error(\"Cannot map selectors for non-collection fields\");\n        }\n        return new MapSelectorSpec({\n            parent: this,\n            model: this._model,\n            orm: this._orm,\n            field: this._field,\n            selector,\n        });\n    }\n\n    get toModelName() {\n        return this._field.toModelName === \"this\"\n            ? this._fieldModel.modelName\n            : this._field.toModelName;\n    }\n\n    get toModel() {\n        const db = this._orm.getDatabase();\n        return db.describe(this.toModelName);\n    }\n}\n","import ForeignKey from \"../fields/ForeignKey\";\nimport ManyToMany from \"../fields/ManyToMany\";\nimport RelationalField from \"../fields/RelationalField\";\n\nimport FieldSelectorSpec from \"./FieldSelectorSpec\";\nimport ModelSelectorSpec from \"./ModelSelectorSpec\";\n\n/**\n * @module selectors\n * @private\n */\n\nexport function createFieldSelectorSpec({\n    parent,\n    model,\n    field,\n    fieldModel,\n    accessorName,\n    orm,\n    isVirtual,\n}) {\n    const fieldSelectorSpec = new FieldSelectorSpec({\n        parent,\n        model,\n        field,\n        fieldModel,\n        accessorName,\n        orm,\n        isVirtual,\n    });\n    /* Do not even try to create field selectors below attributes. */\n    if (!(field instanceof RelationalField)) {\n        // \"orm.Author.name.publisher\" would be nonsense\n        return fieldSelectorSpec;\n    }\n    /* Prevent field selectors below collections. */\n    if (parent instanceof FieldSelectorSpec) {\n        /* eslint-disable no-underscore-dangle */\n        if (\n            // \"orm.Author.books.publisher\" would be nonsense\n            (parent._field instanceof ForeignKey && parent._isVirtual) ||\n            // \"orm.Genre.books.publisher\" would be nonsense\n            parent._field instanceof ManyToMany\n        ) {\n            throw new Error(\n                `Cannot create a selector for \\`${parent._accessorName}.${accessorName}\\` because \\`${parent._accessorName}\\` is a collection field.`\n            );\n        }\n    }\n    const { toModelName } = field;\n    const toModel = orm.get(\n        toModelName === \"this\" ? model.modelName : toModelName\n    );\n    Object.entries(toModel.fields).forEach(\n        ([relatedFieldName, relatedField]) => {\n            const fieldAccessorName = relatedField.as || relatedFieldName;\n            Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {\n                get: () =>\n                    createFieldSelectorSpec({\n                        parent: fieldSelectorSpec,\n                        model,\n                        fieldModel: toModel,\n                        field: relatedField,\n                        accessorName: fieldAccessorName,\n                        orm,\n                        isVirtual: false,\n                    }),\n            });\n        }\n    );\n    Object.entries(toModel.virtualFields).forEach(\n        ([relatedFieldName, relatedField]) => {\n            const fieldAccessorName = relatedField.as || relatedFieldName;\n            if (fieldSelectorSpec.hasOwnProperty(fieldAccessorName)) {\n                return;\n            }\n            Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {\n                get: () =>\n                    createFieldSelectorSpec({\n                        parent: fieldSelectorSpec,\n                        model,\n                        fieldModel: toModel,\n                        field: relatedField,\n                        accessorName: fieldAccessorName,\n                        orm,\n                        isVirtual: true,\n                    }),\n            });\n        }\n    );\n    return fieldSelectorSpec;\n}\n\nexport function createModelSelectorSpec({ model, orm }) {\n    const modelSelectorSpec = new ModelSelectorSpec({\n        parent: null,\n        orm,\n        model,\n    });\n\n    Object.entries(model.fields).forEach(([fieldName, field]) => {\n        const fieldAccessorName = field.as || fieldName;\n        Object.defineProperty(modelSelectorSpec, fieldAccessorName, {\n            get: () =>\n                createFieldSelectorSpec({\n                    parent: modelSelectorSpec,\n                    model,\n                    fieldModel: model,\n                    field,\n                    accessorName: fieldAccessorName,\n                    orm,\n                    isVirtual: false,\n                }),\n        });\n    });\n\n    Object.entries(model.virtualFields).forEach(([fieldName, field]) => {\n        const fieldAccessorName = field.as || fieldName;\n        if (modelSelectorSpec.hasOwnProperty(fieldAccessorName)) {\n            return;\n        }\n        Object.defineProperty(modelSelectorSpec, fieldAccessorName, {\n            get: () =>\n                createFieldSelectorSpec({\n                    parent: modelSelectorSpec,\n                    model,\n                    fieldModel: model,\n                    field,\n                    accessorName: fieldAccessorName,\n                    orm,\n                    isVirtual: true,\n                }),\n        });\n    });\n\n    return modelSelectorSpec;\n}\n","/* eslint-disable max-classes-per-file */\nimport Session from \"./Session\";\nimport Model from \"./Model\";\nimport { createDatabase as defaultCreateDatabase } from \"./db\";\nimport { attr } from \"./fields\";\nimport Field from \"./fields/Field\";\nimport ForeignKey from \"./fields/ForeignKey\";\nimport ManyToMany from \"./fields/ManyToMany\";\n\nimport { createModelSelectorSpec } from \"./selectors\";\n\nimport {\n    m2mName,\n    attachQuerySetMethods,\n    m2mToFieldName,\n    m2mFromFieldName,\n    warnDeprecated,\n} from \"./utils\";\n\nconst ORM_DEFAULTS = {\n    createDatabase: defaultCreateDatabase,\n};\n\nconst RESERVED_TABLE_OPTIONS = [\"indexes\", \"meta\"];\nconst isReservedTableOption = word => RESERVED_TABLE_OPTIONS.includes(word);\n\n/**\n * ORM - the Object Relational Mapper.\n *\n * Use instances of this class to:\n *\n * - Register your {@link Model} classes using {@link ORM#register}\n * - Get the empty state for the underlying database with {@link ORM#getEmptyState}\n * - Start an immutable database session with {@link ORM#session}\n * - Start a mutating database session with {@link ORM#mutableSession}\n *\n * Internally, this class handles generating a schema specification from models\n * to the database.\n */\nclass ORM {\n    /**\n     * Creates a new ORM instance.\n     *\n     * @param {Object} [opts]\n     * @param {Function} [opts.stateSelector] - function that given a Redux state tree\n     *                                          will return the ORM state's subtree,\n     *                                          e.g. `state => state.orm`\n     *                                          (necessary if you want to use selectors)\n     * @param {Function} [opts.createDatabase] - function that creates a database\n     */\n    constructor(opts) {\n        const { createDatabase } = { ...ORM_DEFAULTS, ...(opts || {}) };\n        this.createDatabase = createDatabase;\n        this.registry = [];\n        this.implicitThroughModels = [];\n        this.installedFields = {};\n        this.stateSelector = opts ? opts.stateSelector : null;\n    }\n\n    /**\n     * Registers a {@link Model} class to the ORM.\n     *\n     * If the model has declared any ManyToMany fields, their\n     * through models will be generated and registered with\n     * this call, unless a custom through model has been specified.\n     *\n     * @param  {...Model} models - a {@link Model} class to register\n     * @return {undefined}\n     */\n    register(...models) {\n        models.forEach(model => {\n            if (model.modelName === undefined) {\n                throw new Error(\n                    \"A model was passed that doesn't have a modelName set\"\n                );\n            }\n\n            model.invalidateClassCache();\n\n            this.registerManyToManyModelsFor(model);\n            this.registry.push(model);\n\n            Object.defineProperty(this, model.modelName, {\n                get: () => {\n                    // make sure virtualFields are set up\n                    this._setupModelPrototypes(this.registry);\n\n                    return createModelSelectorSpec({\n                        model,\n                        orm: this,\n                    });\n                },\n            });\n        });\n    }\n\n    registerManyToManyModelsFor(model) {\n        const { fields } = model;\n        const thisModelName = model.modelName;\n\n        Object.entries(fields).forEach(([fieldName, fieldInstance]) => {\n            if (!(fieldInstance instanceof ManyToMany)) {\n                return;\n            }\n\n            let toModelName;\n            if (fieldInstance.toModelName === \"this\") {\n                toModelName = thisModelName;\n            } else {\n                toModelName = fieldInstance.toModelName; // eslint-disable-line prefer-destructuring\n            }\n\n            const selfReferencing = thisModelName === toModelName;\n            const fromFieldName = m2mFromFieldName(thisModelName);\n            const toFieldName = m2mToFieldName(toModelName);\n\n            if (fieldInstance.through) {\n                if (selfReferencing && !fieldInstance.throughFields) {\n                    throw new Error(\n                        \"Self-referencing many-to-many relationship at \" +\n                            `\"${thisModelName}.${fieldName}\" using custom ` +\n                            `model \"${fieldInstance.through}\" has no ` +\n                            \"throughFields key. Cannot determine which \" +\n                            \"fields reference the instances partaking \" +\n                            \"in the relationship.\"\n                    );\n                }\n            } else {\n                const Through = class ThroughModel extends Model {};\n\n                Through.modelName = m2mName(thisModelName, fieldName);\n\n                const PlainForeignKey = class PlainForeignKey extends ForeignKey {\n                    get installsBackwardsVirtualField() {\n                        return false;\n                    }\n\n                    get installsBackwardsDescriptor() {\n                        return false;\n                    }\n                };\n                const ForeignKeyClass = selfReferencing\n                    ? PlainForeignKey\n                    : ForeignKey;\n                Through.fields = {\n                    id: attr(),\n                    [fromFieldName]: new ForeignKeyClass(thisModelName),\n                    [toFieldName]: new ForeignKeyClass(toModelName),\n                };\n\n                Through.invalidateClassCache();\n                this.implicitThroughModels.push(Through);\n            }\n        });\n    }\n\n    /**\n     * Gets a {@link Model} class by its name from the registry.\n     * @param  {string} modelName - the name of the {@link Model} class to get\n     * @throws If {@link Model} class is not found.\n     * @return {Model} the {@link Model} class, if found\n     */\n    get(modelName) {\n        const allModels = this.registry.concat(this.implicitThroughModels);\n        const found = Object.values(allModels).find(\n            model => model.modelName === modelName\n        );\n\n        if (typeof found === \"undefined\") {\n            throw new Error(`Did not find model ${modelName} from registry.`);\n        }\n        return found;\n    }\n\n    getModelClasses() {\n        this._setupModelPrototypes(this.registry);\n        this._setupModelPrototypes(this.implicitThroughModels);\n        return this.registry.concat(this.implicitThroughModels);\n    }\n\n    generateSchemaSpec() {\n        const models = this.getModelClasses();\n        const tables = models.reduce((spec, modelClass) => {\n            const tableName = modelClass.modelName;\n            const tableSpec = modelClass.tableOptions();\n            Object.keys(tableSpec)\n                .filter(isReservedTableOption)\n                .forEach(key => {\n                    throw new Error(\n                        `Reserved keyword \\`${key}\\` used in ${tableName}.options.`\n                    );\n                });\n            spec[tableName] = {\n                fields: { ...modelClass.fields },\n                ...tableSpec,\n            };\n            return spec;\n        }, {});\n        return { tables };\n    }\n\n    getDatabase() {\n        if (!this.db) {\n            this.db = this.createDatabase(this.generateSchemaSpec());\n        }\n        return this.db;\n    }\n\n    /**\n     * Returns the empty database state.\n     * @return {Object} the empty state\n     */\n    getEmptyState() {\n        return this.getDatabase().getEmptyState();\n    }\n\n    /**\n     * Begins an immutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    session(state) {\n        return new Session(this, this.getDatabase(), state);\n    }\n\n    /**\n     * Begins a mutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    mutableSession(state) {\n        return new Session(this, this.getDatabase(), state, true);\n    }\n\n    /**\n     * @private\n     */\n    _setupModelPrototypes(models) {\n        models\n            .filter(model => !model.isSetUp)\n            .forEach(model => {\n                const { fields, modelName, querySetClass } = model;\n                Object.entries(fields).forEach(([fieldName, field]) => {\n                    if (!(field instanceof Field)) {\n                        throw new Error(\n                            `${modelName}.${fieldName} is of type \"${typeof field}\" ` +\n                                \"but must be an instance of Field. Please use the \" +\n                                \"`attr`, `fk`, `oneToOne` and `many` \" +\n                                \"functions to define fields.\"\n                        );\n                    }\n                    if (!this._isFieldInstalled(modelName, fieldName)) {\n                        this._installField(field, fieldName, model);\n                        this._setFieldInstalled(modelName, fieldName);\n                    }\n                });\n                attachQuerySetMethods(model, querySetClass);\n                model.isSetUp = true;\n            });\n    }\n\n    /**\n     * @private\n     */\n    _isFieldInstalled(modelName, fieldName) {\n        return this.installedFields.hasOwnProperty(modelName)\n            ? !!this.installedFields[modelName][fieldName]\n            : false;\n    }\n\n    /**\n     * @private\n     */\n    _setFieldInstalled(modelName, fieldName) {\n        if (!this.installedFields.hasOwnProperty(modelName)) {\n            this.installedFields[modelName] = {};\n        }\n        this.installedFields[modelName][fieldName] = true;\n    }\n\n    /**\n     * Installs a field on a model and its related models if necessary.\n     * @private\n     */\n    _installField(field, fieldName, model) {\n        const FieldInstaller = field.installerClass;\n        new FieldInstaller({\n            field,\n            fieldName,\n            model,\n            orm: this,\n        }).run();\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Use {@link ORM#mutableSession} instead.\n     */\n    withMutations(state) {\n        warnDeprecated(\n            \"`ORM.prototype.withMutations` has been deprecated. \" +\n                \"Use `ORM.prototype.mutableSession` instead.\"\n        );\n        return this.mutableSession(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#session} instead.\n     */\n    from(state) {\n        warnDeprecated(\n            \"`ORM.prototype.from` has been deprecated. \" +\n                \"Use `ORM.prototype.session` instead.\"\n        );\n        return this.session(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#getEmptyState} instead.\n     */\n    getDefaultState() {\n        warnDeprecated(\n            \"`ORM.prototype.getDefaultState` has been deprecated. Use \" +\n                \"`ORM.prototype.getEmptyState` instead.\"\n        );\n        return this.getEmptyState();\n    }\n\n    /**\n     * @deprecated Define a Model class instead.\n     */\n    define() {\n        throw new Error(\n            \"`ORM.prototype.define` has been removed. Please define a Model class.\"\n        );\n    }\n}\n\nexport function DeprecatedSchema() {\n    throw new Error(\n        \"Schema has been renamed to ORM. Please import ORM instead of Schema \" +\n            \"from Redux-ORM.\"\n    );\n}\n\nexport { ORM };\n\nexport default ORM;\n","import { STATE_FLAG } from \"./constants\";\n\nconst defaultEqualityCheck = (a, b) => a === b;\nexport const eqCheck = defaultEqualityCheck;\n\nconst isOrmState = arg =>\n    arg && typeof arg === \"object\" && arg.hasOwnProperty(STATE_FLAG);\n\nconst argsAreEqual = (lastArgs, nextArgs, equalityCheck) =>\n    nextArgs.every(\n        (arg, index) =>\n            (isOrmState(arg) && isOrmState(lastArgs[index])) ||\n            equalityCheck(arg, lastArgs[index])\n    );\n\nconst rowsAreEqual = (ids, rowsA, rowsB) =>\n    ids.every(id => rowsA[id] === rowsB[id]);\n\nconst accessedModelInstancesAreEqual = (previous, ormState, orm) => {\n    const { accessedInstances } = previous;\n\n    return Object.entries(accessedInstances).every(([modelName, instances]) => {\n        // if the entire table has not been changed, we have nothing to do\n        if (previous.ormState[modelName] === ormState[modelName]) {\n            return true;\n        }\n\n        const { mapName } = orm.getDatabase().describe(modelName);\n\n        const { [mapName]: previousRows } = previous.ormState[modelName];\n        const { [mapName]: rows } = ormState[modelName];\n\n        const accessedIds = Object.keys(instances);\n        return rowsAreEqual(accessedIds, previousRows, rows);\n    });\n};\n\nconst accessedIndexesAreEqual = (previous, ormState) => {\n    const { accessedIndexes } = previous;\n\n    return Object.entries(accessedIndexes).every(([modelName, indexes]) =>\n        Object.entries(indexes).every(([column, values]) =>\n            values.every(\n                value =>\n                    previous.ormState[modelName].indexes[column][value] ===\n                    ormState[modelName].indexes[column][value]\n            )\n        )\n    );\n};\n\nconst fullTableScannedModelsAreEqual = (previous, ormState) =>\n    previous.fullTableScannedModels.every(\n        modelName => previous.ormState[modelName] === ormState[modelName]\n    );\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 6.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 6.\n *\n * 3. Some filter queries may have required scanning entire tables during the last run.\n *    If any of those tables have changed, go to 6.\n *\n * 4. Check which foreign key indexes the database has used to speed up queries\n *    during the last run. If any have changed, go to 6.\n *\n * 5. Check which Model's instances the selector has accessed during the last run.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 6. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} argEqualityCheck - equality check function to use with normal\n *                                       selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nexport function memoize(func, argEqualityCheck = defaultEqualityCheck, orm) {\n    let previous = {\n        /* Result of the previous function call */\n        result: null,\n        /* Arguments to the previous function call (excluding ORM state) */\n        args: null,\n        /**\n         * Snapshot of the previous database.\n         *\n         * Lets us know how the tables looked like\n         * during the previous function call.\n         */\n        ormState: null,\n        /**\n         * Names of models whose tables have been scanned completely\n         * during previous function call (contains only model names)\n         * Format example: ['Book']\n         */\n        fullTableScannedModels: [],\n        /**\n         * Map of which model instances have been accessed\n         * during previous function call.\n         * Contains only PKs of accessed instances.\n         * Format example: { Book: { 1: true, 3: true } }\n         */\n        accessedInstances: {},\n        /**\n         * Map of which attribute indexes have been accessed\n         * during previous function call.\n         * Contains only attributes that were actually filtered on.\n         * Author.withId(3).books would add 3 to the authorId index below.\n         * Format example: { Book: { authorId: [1, 2], publisherId: [5] } }\n         */\n        accessedIndexes: {},\n    };\n\n    return (...stateAndArgs) => {\n        /**\n         * The first argument to this function needs to be\n         * the ORM's reducer state in the user's Redux store.\n         */\n        const [ormState, ...args] = stateAndArgs;\n\n        const selectorWasCalledBefore = Boolean(previous.args);\n        if (\n            selectorWasCalledBefore &&\n            argsAreEqual(previous.args, args, argEqualityCheck) &&\n            fullTableScannedModelsAreEqual(previous, ormState) &&\n            accessedIndexesAreEqual(previous, ormState) &&\n            accessedModelInstancesAreEqual(previous, ormState, orm)\n        ) {\n            /**\n             * None of this selector's dependencies have changed\n             * since the last time that we called it.\n             */\n            return previous.result;\n        }\n\n        /**\n         * Start a session so that the selector can access the database.\n         * Make this session immutable. This way we can find out if\n         * the operations that the selector performs are cacheable.\n         */\n        const session = orm.session(ormState);\n        /* Replace all ORM state arguments by the session above */\n        const argsWithSession = args.map(arg =>\n            isOrmState(arg) ? session : arg\n        );\n\n        /* This is where we call the actual function */\n        const result = func.apply(null, argsWithSession); // eslint-disable-line prefer-spread\n\n        /**\n         * The metadata for the previous call are no longer valid.\n         * Update cached values.\n         */\n        previous = {\n            /* Arguments that were passed to the selector */\n            args,\n            /* Selector result */\n            result,\n            /* Redux state slice for session.state */\n            ormState,\n            /* Rows retrieved by resolved primary key */\n            accessedInstances: session.accessedModelInstances,\n            /* Foreign key indexes that were used to speed up queries */\n            accessedIndexes: session.accessedIndexes,\n            /* Tables that had to be scanned completely */\n            fullTableScannedModels: session.fullTableScannedModels,\n        };\n\n        return result;\n    };\n}\n","import { createSelectorCreator } from \"reselect\";\nimport createCachedSelector, { FlatMapCache } from \"re-reselect\";\n\nimport { memoize } from \"./memoize\";\n\nimport { ORM } from \"./ORM\";\nimport SelectorSpec from \"./selectors/SelectorSpec\";\nimport MapSelectorSpec from \"./selectors/MapSelectorSpec\";\n\n/**\n * @module redux\n * @desc Provides functions for integration with Redux.\n */\n\n/**\n * Calls all models' reducers if they exist.\n *\n * @return {undefined}\n * @global\n */\nexport function defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach(modelClass => {\n        if (typeof modelClass.reducer === \"function\") {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\nexport function createReducer(orm, updater = defaultUpdater) {\n    return (state, action) => {\n        const session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n}\n\n/**\n * @private\n * @param {SelectorSpec} spec\n */\nfunction createSelectorFromSpec(spec) {\n    if (spec instanceof MapSelectorSpec) {\n        const parentSelector = createSelectorFromSpec(spec.parent);\n        return spec.createResultFunc(parentSelector);\n    }\n    return createCachedSelector(\n        spec.dependencies,\n        spec.resultFunc\n    )({\n        keySelector: spec.keySelector,\n        cacheObject: new FlatMapCache(),\n        selectorCreator: createSelector, // eslint-disable-line no-use-before-define\n    });\n}\n\n/**\n * Tries to find ORM instance using the argument.\n * @private\n * @param {*} arg\n */\nfunction toORM(arg) {\n    /* eslint-disable no-underscore-dangle */\n    if (arg instanceof ORM) {\n        return arg;\n    }\n    if (arg instanceof SelectorSpec) {\n        return arg._orm;\n    }\n    return false;\n}\n\nconst selectorCache = new Map();\nconst SELECTOR_KEY = Symbol.for(\"REDUX_ORM_SELECTOR\");\n\n/**\n * @private\n * @param {function|ORM|SelectorSpec} arg\n */\nfunction toSelector(arg) {\n    if (typeof arg === \"function\") {\n        return arg;\n    }\n    if (arg instanceof ORM) {\n        return arg.stateSelector;\n    }\n    if (arg instanceof MapSelectorSpec) {\n        // the argument to map() needs to be callable\n        arg.selector = toSelector(arg.selector);\n    }\n    if (arg instanceof SelectorSpec) {\n        const { orm, cachePath } = arg;\n        let level;\n\n        // the selector cache for the spec's ORM\n        if (!selectorCache.has(orm)) {\n            selectorCache.set(orm, new Map());\n        }\n        const ormSelectors = selectorCache.get(orm);\n\n        /**\n         * Drill down into selector map by cachePath.\n         *\n         * The selector itself is stored under a special SELECTOR_KEY\n         * so that we can store selectors below it as well.\n         */\n        level = ormSelectors;\n        for (let i = 0; i < cachePath.length; ++i) {\n            const storageKey = cachePath[i];\n            if (!level.has(storageKey)) {\n                level.set(storageKey, new Map());\n            }\n            level = level.get(storageKey);\n        }\n        if (level && level.has(SELECTOR_KEY)) {\n            // Cache hit: the selector has been created before\n            return level.get(SELECTOR_KEY);\n        }\n        // Cache miss: the selector needs to be created\n        const selector = createSelectorFromSpec(arg);\n        // Save the selector at the cachePath position\n        level.set(SELECTOR_KEY, selector);\n\n        return selector;\n    }\n    throw new Error(\n        `Failed to interpret selector argument: ${JSON.stringify(\n            arg\n        )} of type ${typeof arg}`\n    );\n}\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, any of the arguments\n * you pass first will be considered selectors and mapped\n * to their outputs, like in `reselect`.\n *\n * Here are some example selectors:\n *\n * ```javascript\n * // orm is an instance of ORM\n * // reduxState is the state of a Redux store\n * const books = createSelector(orm.Book);\n * books(reduxState) // array of book refs\n *\n * const bookAuthors = createSelector(orm.Book.authors);\n * bookAuthors(reduxState) // two-dimensional array of author refs for each book\n * ```\n * Selectors can easily be applied to related models:\n * ```javascript\n * const bookAuthorNames = createSelector(\n *     orm.Book.authors.map(orm.Author.name),\n * );\n * bookAuthorNames(reduxState, 8) // names of all authors of book with ID 8\n * bookAuthorNames(reduxState, [8, 9]) // 2D array of names of all authors of books with IDs 8 and 9\n * ```\n * Also note that `orm.Author.name` did not need to be wrapped in another `createSelector` call,\n * although that would be possible.\n *\n * For more complex calculations you can access\n * entire session objects by passing an ORM instance.\n * ```javascript\n * const freshBananasCost = createSelector(\n *     orm,\n *     session => {\n *        const banana = session.Product.get({\n *            name: \"Banana\",\n *        });\n *        // amount of fresh bananas in shopping cart\n *        const amount = session.ShoppingCart.filter({\n *            product_id: banana.id,\n *            is_fresh: true,\n *        }).count();\n *        return `USD ${amount * banana.price}`;\n *     }\n * );\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use pure rendering in your React components\n * for performance gains.\n *\n * @global\n *\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nexport function createSelector(...args) {\n    if (!args.length) {\n        throw new Error(\"Cannot create a selector without arguments.\");\n    }\n\n    const resultArg = args.pop();\n    const dependencies = Array.isArray(args[0]) ? args[0] : args;\n\n    const orm = dependencies.map(toORM).find(Boolean);\n    const inputFuncs = dependencies.map(toSelector);\n\n    if (typeof resultArg === \"function\") {\n        if (!orm) {\n            throw new Error(\n                \"Failed to resolve the current ORM database state. Please pass an ORM instance or an ORM selector as an argument to `createSelector()`.\"\n            );\n        } else if (!orm.stateSelector) {\n            throw new Error(\n                \"Failed to resolve the current ORM database state. Please pass an object to the ORM constructor that specifies a `stateSelector` function.\"\n            );\n        } else if (typeof orm.stateSelector !== \"function\") {\n            throw new Error(\n                `Failed to resolve the current ORM database state. Please pass a function when specifying the ORM's \\`stateSelector\\`. Received: ${JSON.stringify(\n                    orm.stateSelector\n                )} of type ${typeof orm.stateSelector}`\n            );\n        }\n\n        return createSelectorCreator(\n            memoize,\n            undefined,\n            orm\n        )([orm.stateSelector, ...inputFuncs], resultArg);\n    }\n\n    if (resultArg instanceof ORM) {\n        throw new Error(\n            \"ORM instances cannot be the result function of selectors. You can access your models in the last function that you pass to `createSelector()`.\"\n        );\n    }\n    if (inputFuncs.length) {\n        console.warn(\n            \"Your input selectors will be ignored: the passed result function does not require any input.\"\n        );\n    }\n\n    return toSelector(resultArg);\n}\n","import QuerySet from \"./QuerySet\";\nimport Model from \"./Model\";\nimport { DeprecatedSchema, ORM } from \"./ORM\";\nimport Session from \"./Session\";\nimport { createReducer, createSelector } from \"./redux\";\nimport ForeignKey from \"./fields/ForeignKey\";\nimport ManyToMany from \"./fields/ManyToMany\";\nimport OneToOne from \"./fields/OneToOne\";\nimport Attribute from \"./fields/Attribute\";\nimport { fk, many, oneToOne, attr } from \"./fields\";\n\nconst Schema = DeprecatedSchema;\n\nconst Backend = function RemovedBackend() {\n    throw new Error(\n        \"Having a custom Backend instance is now unsupported. \" +\n            \"Documentation for database customization is upcoming, for now \" +\n            \"please look at the db folder in the source.\"\n    );\n};\n\nexport {\n    Attribute,\n    QuerySet,\n    Model,\n    ORM,\n    Schema,\n    Backend,\n    Session,\n    ForeignKey,\n    ManyToMany,\n    OneToOne,\n    fk,\n    many,\n    attr,\n    oneToOne,\n    createReducer,\n    createSelector,\n};\n\nexport default Model;\n"],"sourceRoot":""}